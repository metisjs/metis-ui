"use strict";(self.webpackChunkmetis_ui=self.webpackChunkmetis_ui||[]).push([[3630],{53630:function(a,e,d){d.r(e),d.d(e,{texts:function(){return I}});const I=[{value:"用于创建一个实体或收集信息。",paraId:0,tocIndex:0},{value:"需要对输入的数据类型进行校验时。",paraId:0,tocIndex:0},{value:"参数",paraId:1,tocIndex:43},{value:"说明",paraId:1,tocIndex:43},{value:"类型",paraId:1,tocIndex:43},{value:"默认值",paraId:1,tocIndex:43},{value:"版本",paraId:1,tocIndex:43},{value:"className",paraId:1,tocIndex:43},{value:"语义化结构 class",paraId:1,tocIndex:43},{value:"SemanticDOM",paraId:2,tocIndex:43},{value:"-",paraId:1,tocIndex:43},{value:"clearOnDestroy",paraId:1,tocIndex:43},{value:"当表单被卸载时清空表单值",paraId:1,tocIndex:43},{value:"boolean",paraId:1,tocIndex:43},{value:"false",paraId:1,tocIndex:43},{value:"colon",paraId:1,tocIndex:43},{value:"配置 Form.Item 的 ",paraId:1,tocIndex:43},{value:"colon",paraId:1,tocIndex:43},{value:" 的默认值。表示是否显示 label 后面的冒号 (只有在属性 layout 为 horizontal 时有效)",paraId:1,tocIndex:43},{value:"boolean",paraId:1,tocIndex:43},{value:"true",paraId:1,tocIndex:43},{value:"column",paraId:1,tocIndex:43},{value:"栅格显示, 可以写成像素值或支持响应式的对象写法 ",paraId:1,tocIndex:43},{value:"{ xs: 2, sm: 3, md: 4}",paraId:1,tocIndex:43},{value:"number、 Record<Breakpoint, number>",paraId:1,tocIndex:43},{value:"'auto'",paraId:1,tocIndex:43},{value:"component",paraId:1,tocIndex:43},{value:"设置 Form 渲染元素，为 ",paraId:1,tocIndex:43},{value:"false",paraId:1,tocIndex:43},{value:" 则不创建 DOM 节点",paraId:1,tocIndex:43},{value:"ComponentType、 false",paraId:1,tocIndex:43},{value:"form",paraId:1,tocIndex:43},{value:"disabled",paraId:1,tocIndex:43},{value:"设置表单组件禁用，仅对内部组件有效",paraId:1,tocIndex:43},{value:"boolean",paraId:1,tocIndex:43},{value:"false",paraId:1,tocIndex:43},{value:"errorType",paraId:1,tocIndex:43},{value:"字段验证失败时的提示方式",paraId:1,tocIndex:43},{value:"popover",paraId:1,tocIndex:43},{value:"、 ",paraId:1,tocIndex:43},{value:"default",paraId:1,tocIndex:43},{value:"default",paraId:1,tocIndex:43},{value:"feedbackIcons",paraId:1,tocIndex:43},{value:"当 ",paraId:1,tocIndex:43},{value:"Form.Item",paraId:1,tocIndex:43},{value:" 有 ",paraId:1,tocIndex:43},{value:"hasFeedback",paraId:1,tocIndex:43},{value:" 属性时可以自定义图标",paraId:1,tocIndex:43},{value:"FeedbackIcons",paraId:3,tocIndex:43},{value:"-",paraId:1,tocIndex:43},{value:"fields",paraId:1,tocIndex:43},{value:"通过状态管理（如 redux）控制表单字段，如非强需求不推荐使用。查看",paraId:1,tocIndex:43},{value:"示例",paraId:4,tocIndex:43},{value:"FieldData",paraId:5,tocIndex:43},{value:"[]",paraId:1,tocIndex:43},{value:"-",paraId:1,tocIndex:43},{value:"form",paraId:1,tocIndex:43},{value:"经 ",paraId:1,tocIndex:43},{value:"Form.useForm()",paraId:1,tocIndex:43},{value:" 创建的 form 控制实例，不提供时会自动创建",paraId:1,tocIndex:43},{value:"FormInstance",paraId:6,tocIndex:43},{value:"-",paraId:1,tocIndex:43},{value:"initialValues",paraId:1,tocIndex:43},{value:"表单默认值，只有初始化以及重置时生效",paraId:1,tocIndex:43},{value:"object",paraId:1,tocIndex:43},{value:"-",paraId:1,tocIndex:43},{value:"items",paraId:1,tocIndex:43},{value:"表单项, 和 children 方法渲染类似",paraId:1,tocIndex:43},{value:"ItemType",paraId:7,tocIndex:43},{value:"[]",paraId:1,tocIndex:43},{value:"labelAlign",paraId:1,tocIndex:43},{value:"label 标签的文本对齐方式",paraId:1,tocIndex:43},{value:"left",paraId:1,tocIndex:43},{value:"、 ",paraId:1,tocIndex:43},{value:"right",paraId:1,tocIndex:43},{value:"right",paraId:1,tocIndex:43},{value:"labelWidth",paraId:1,tocIndex:43},{value:"标签的长度，例如 '50px', 可以使用 auto。",paraId:1,tocIndex:43},{value:"string、 number",paraId:1,tocIndex:43},{value:"'auto'",paraId:1,tocIndex:43},{value:"layout",paraId:1,tocIndex:43},{value:"表单布局",paraId:1,tocIndex:43},{value:"horizontal",paraId:1,tocIndex:43},{value:"、 ",paraId:1,tocIndex:43},{value:"vertical",paraId:1,tocIndex:43},{value:"、 ",paraId:1,tocIndex:43},{value:"inline",paraId:1,tocIndex:43},{value:"horizontal",paraId:1,tocIndex:43},{value:"name",paraId:1,tocIndex:43},{value:"表单名称，会作为表单字段 ",paraId:1,tocIndex:43},{value:"id",paraId:1,tocIndex:43},{value:" 前缀使用",paraId:1,tocIndex:43},{value:"string",paraId:1,tocIndex:43},{value:"-",paraId:1,tocIndex:43},{value:"preserve",paraId:1,tocIndex:43},{value:"当字段被删除时保留字段值。你可以通过 ",paraId:1,tocIndex:43},{value:"getFieldsValue(true)",paraId:1,tocIndex:43},{value:" 来获取保留字段值",paraId:1,tocIndex:43},{value:"boolean",paraId:1,tocIndex:43},{value:"true",paraId:1,tocIndex:43},{value:"requiredMark",paraId:1,tocIndex:43},{value:"必选样式，可以切换为必选或者可选展示样式。此为 Form 配置，Form.Item 无法单独配置",paraId:1,tocIndex:43},{value:"boolean、 ",paraId:1,tocIndex:43},{value:"optional",paraId:1,tocIndex:43},{value:"、 ((label: ReactNode, info: { required: boolean }) => ReactNode)",paraId:1,tocIndex:43},{value:"true",paraId:1,tocIndex:43},{value:"scrollToFirstError",paraId:1,tocIndex:43},{value:"提交失败自动滚动到第一个错误字段",paraId:1,tocIndex:43},{value:"boolean、 ",paraId:1,tocIndex:43},{value:"Options",paraId:1,tocIndex:43},{value:"false",paraId:1,tocIndex:43},{value:"size",paraId:1,tocIndex:43},{value:"设置字段组件的尺寸（仅限内部组件生效）",paraId:1,tocIndex:43},{value:"mini",paraId:1,tocIndex:43},{value:"、 ",paraId:1,tocIndex:43},{value:"small",paraId:1,tocIndex:43},{value:"、 ",paraId:1,tocIndex:43},{value:"middle",paraId:1,tocIndex:43},{value:"、 ",paraId:1,tocIndex:43},{value:"large",paraId:1,tocIndex:43},{value:"-",paraId:1,tocIndex:43},{value:"validateMessages",paraId:1,tocIndex:43},{value:"验证提示模板，说明",paraId:1,tocIndex:43},{value:"见下",paraId:8,tocIndex:43},{value:"ValidateMessages",paraId:1,tocIndex:43},{value:"-",paraId:1,tocIndex:43},{value:"validateTrigger",paraId:1,tocIndex:43},{value:"统一设置字段触发验证的时机",paraId:1,tocIndex:43},{value:"string、 string[]",paraId:1,tocIndex:43},{value:"onChange",paraId:1,tocIndex:43},{value:"variant",paraId:1,tocIndex:43},{value:"表单内控件变体",paraId:1,tocIndex:43},{value:"outlined",paraId:1,tocIndex:43},{value:"、 ",paraId:1,tocIndex:43},{value:"borderless",paraId:1,tocIndex:43},{value:"、 ",paraId:1,tocIndex:43},{value:"filled",paraId:1,tocIndex:43},{value:"outlined",paraId:1,tocIndex:43},{value:"onFieldsChange",paraId:1,tocIndex:43},{value:"字段更新时触发回调事件",paraId:1,tocIndex:43},{value:"function(changedFields, allFields)",paraId:1,tocIndex:43},{value:"-",paraId:1,tocIndex:43},{value:"onFinish",paraId:1,tocIndex:43},{value:"提交表单且数据验证成功后回调事件",paraId:1,tocIndex:43},{value:"function(values)",paraId:1,tocIndex:43},{value:"-",paraId:1,tocIndex:43},{value:"onFinishFailed",paraId:1,tocIndex:43},{value:"提交表单且数据验证失败后回调事件",paraId:1,tocIndex:43},{value:"function({ values, errorFields, outOfDate })",paraId:1,tocIndex:43},{value:"-",paraId:1,tocIndex:43},{value:"onValuesChange",paraId:1,tocIndex:43},{value:"字段值更新时触发回调事件",paraId:1,tocIndex:43},{value:"function(changedValues, allValues)",paraId:1,tocIndex:43},{value:"-",paraId:1,tocIndex:43},{value:"支持原生 form 除 ",paraId:9,tocIndex:43},{value:"onSubmit",paraId:9,tocIndex:43},{value:" 外的所有属性。",paraId:9,tocIndex:43},{value:"参数",paraId:10,tocIndex:44},{value:"说明",paraId:10,tocIndex:44},{value:"类型",paraId:10,tocIndex:44},{value:"默认值",paraId:10,tocIndex:44},{value:"版本",paraId:10,tocIndex:44},{value:"fieldProps",paraId:10,tocIndex:44},{value:"组件属性",paraId:10,tocIndex:44},{value:"-",paraId:10,tocIndex:44},{value:"fieldRender",paraId:10,tocIndex:44},{value:"自定义渲染组件",paraId:10,tocIndex:44},{value:"(form) => ReactNode",paraId:10,tocIndex:44},{value:"-",paraId:10,tocIndex:44},{value:"valueEnum",paraId:10,tocIndex:44},{value:"字段值枚举",paraId:10,tocIndex:44},{value:"-",paraId:10,tocIndex:44},{value:"valueType",paraId:10,tocIndex:44},{value:"字段值类型",paraId:10,tocIndex:44},{value:"text",paraId:10,tocIndex:44},{value:"-",paraId:10,tocIndex:44},{value:"支持原生 Form.Item 除 ",paraId:11,tocIndex:44},{value:"children",paraId:11,tocIndex:44},{value:" 外的所有属性。",paraId:11,tocIndex:44},{value:"valueType",paraId:12,tocIndex:45},{value:"说明",paraId:12,tocIndex:45},{value:"avatar",paraId:12,tocIndex:45},{value:"头像",paraId:12,tocIndex:45},{value:"cascader",paraId:12,tocIndex:45},{value:"级联选择器",paraId:12,tocIndex:45},{value:"checkbox",paraId:12,tocIndex:45},{value:"多选框",paraId:12,tocIndex:45},{value:"date",paraId:12,tocIndex:45},{value:"日期",paraId:12,tocIndex:45},{value:"dateMonth",paraId:12,tocIndex:45},{value:"月",paraId:12,tocIndex:45},{value:"dateQuarter",paraId:12,tocIndex:45},{value:"季度输入",paraId:12,tocIndex:45},{value:"dateRange",paraId:12,tocIndex:45},{value:"日期区间",paraId:12,tocIndex:45},{value:"dateTime",paraId:12,tocIndex:45},{value:"日期时间",paraId:12,tocIndex:45},{value:"dateTimeRange",paraId:12,tocIndex:45},{value:"日期时间区间",paraId:12,tocIndex:45},{value:"dateWeek",paraId:12,tocIndex:45},{value:"周",paraId:12,tocIndex:45},{value:"dateYear",paraId:12,tocIndex:45},{value:"年份输入",paraId:12,tocIndex:45},{value:"digit",paraId:12,tocIndex:45},{value:"数字输入框",paraId:12,tocIndex:45},{value:"digitRange",paraId:12,tocIndex:45},{value:"数字区间",paraId:12,tocIndex:45},{value:"fromNow",paraId:12,tocIndex:45},{value:"相对于当前时间",paraId:12,tocIndex:45},{value:"image",paraId:12,tocIndex:45},{value:"图片",paraId:12,tocIndex:45},{value:"money",paraId:12,tocIndex:45},{value:"金额输入框",paraId:12,tocIndex:45},{value:"moneyRange",paraId:12,tocIndex:45},{value:"金额区间",paraId:12,tocIndex:45},{value:"password",paraId:12,tocIndex:45},{value:"密码输入框",paraId:12,tocIndex:45},{value:"percent",paraId:12,tocIndex:45},{value:"百分比组件",paraId:12,tocIndex:45},{value:"percentRange",paraId:12,tocIndex:45},{value:"百分比区间",paraId:12,tocIndex:45},{value:"progress",paraId:12,tocIndex:45},{value:"进度条",paraId:12,tocIndex:45},{value:"radio",paraId:12,tocIndex:45},{value:"单选框",paraId:12,tocIndex:45},{value:"rate",paraId:12,tocIndex:45},{value:"星级组件",paraId:12,tocIndex:45},{value:"segmented",paraId:12,tocIndex:45},{value:"分段器",paraId:12,tocIndex:45},{value:"select",paraId:12,tocIndex:45},{value:"下拉框",paraId:12,tocIndex:45},{value:"switch",paraId:12,tocIndex:45},{value:"开关",paraId:12,tocIndex:45},{value:"tag",paraId:12,tocIndex:45},{value:"标签",paraId:12,tocIndex:45},{value:"text",paraId:12,tocIndex:45},{value:"文本框",paraId:12,tocIndex:45},{value:"textarea",paraId:12,tocIndex:45},{value:"文本域",paraId:12,tocIndex:45},{value:"time",paraId:12,tocIndex:45},{value:"时间",paraId:12,tocIndex:45},{value:"timeRange",paraId:12,tocIndex:45},{value:"时间区间",paraId:12,tocIndex:45},{value:"const valueEnum = {\n  open: '未解决',\n  closed: '已解决',\n};\n\nconst valueEnum = {\n  open: {\n    label: '未解决',\n    status: 'error',\n  },\n  closed: {\n    label: '已解决',\n    status: 'success',\n  },\n};\n\n// 注意：当 key 为 number 类型时，由于js在对象转换时会把number转成string，从而导致显示错误，这时你需要使用Map。\nconst valueEnum = new Map([[0, '男'], [1, '女']]);\n\n// 也可以从远程获取\nconst valueEnum = {\n  request: async () => ({data:[{id:1,name:'Open'},{id:2,name:'Closed'}]}),\n  fieldNames: {\n    value: 'id';\n    label: 'name';\n  };\n}\n",paraId:13,tocIndex:46},{value:"Form 为验证提供了默认的错误提示信息，你可以通过配置 ",paraId:14,tocIndex:47},{value:"validateMessages",paraId:14,tocIndex:47},{value:" 属性，修改对应的提示模板。一种常见的使用方式，是配置国际化提示信息：",paraId:14,tocIndex:47},{value:"const validateMessages = {\n  required: \"'${name}' 是必选字段\",\n  // ...\n};\n\n<Form validateMessages={validateMessages} />;\n",paraId:15,tocIndex:47},{value:"此外，",paraId:16,tocIndex:47},{value:"ConfigProvider",paraId:17,tocIndex:47},{value:" 也提供了全局化配置方案，允许统一配置错误提示模板：",paraId:16,tocIndex:47},{value:"const validateMessages = {\n  required: \"'${name}' 是必选字段\",\n  // ...\n};\n\n<ConfigProvider form={{ validateMessages }}>\n  <Form />\n</ConfigProvider>;\n",paraId:18,tocIndex:47},{value:"表单字段组件，用于数据双向绑定、校验、布局等。",paraId:19,tocIndex:48},{value:"参数",paraId:20,tocIndex:48},{value:"说明",paraId:20,tocIndex:48},{value:"类型",paraId:20,tocIndex:48},{value:"默认值",paraId:20,tocIndex:48},{value:"版本",paraId:20,tocIndex:48},{value:"className",paraId:20,tocIndex:48},{value:"语义化结构 class",paraId:20,tocIndex:48},{value:"SemanticDOM",paraId:21,tocIndex:48},{value:"-",paraId:20,tocIndex:48},{value:"colon",paraId:20,tocIndex:48},{value:"配合 ",paraId:20,tocIndex:48},{value:"label",paraId:20,tocIndex:48},{value:" 属性使用，表示是否显示 ",paraId:20,tocIndex:48},{value:"label",paraId:20,tocIndex:48},{value:" 后面的冒号",paraId:20,tocIndex:48},{value:"boolean",paraId:20,tocIndex:48},{value:"true",paraId:20,tocIndex:48},{value:"dependencies",paraId:20,tocIndex:48},{value:"设置依赖字段，说明",paraId:20,tocIndex:48},{value:"见下",paraId:22,tocIndex:48},{value:"NamePath",paraId:23,tocIndex:48},{value:"[]",paraId:20,tocIndex:48},{value:"-",paraId:20,tocIndex:48},{value:"extra",paraId:20,tocIndex:48},{value:"额外的提示信息，和 ",paraId:20,tocIndex:48},{value:"help",paraId:20,tocIndex:48},{value:" 类似，当需要错误信息和提示文案同时出现时，可以使用这个。",paraId:20,tocIndex:48},{value:"ReactNode",paraId:20,tocIndex:48},{value:"-",paraId:20,tocIndex:48},{value:"getValueFromEvent",paraId:20,tocIndex:48},{value:"设置如何将 event 的值转换成字段值",paraId:20,tocIndex:48},{value:"(..args: any[]) => any",paraId:20,tocIndex:48},{value:"-",paraId:20,tocIndex:48},{value:"getValueProps",paraId:20,tocIndex:48},{value:"为子元素添加额外的属性 (不建议通过 ",paraId:20,tocIndex:48},{value:"getValueProps",paraId:20,tocIndex:48},{value:" 生成动态函数 prop，请直接将其传递给子组件)",paraId:20,tocIndex:48},{value:"(value: any) => Record<string, any>",paraId:20,tocIndex:48},{value:"-",paraId:20,tocIndex:48},{value:"hasFeedback",paraId:20,tocIndex:48},{value:"配合 ",paraId:20,tocIndex:48},{value:"validateStatus",paraId:20,tocIndex:48},{value:" 属性使用，展示校验状态图标，建议只配合 Input 组件使用 此外，它还可以通过 Icons 属性获取反馈图标。",paraId:20,tocIndex:48},{value:"boolean、 { icons: ",paraId:20,tocIndex:48},{value:"FeedbackIcons",paraId:24,tocIndex:48},{value:" }",paraId:20,tocIndex:48},{value:"false",paraId:20,tocIndex:48},{value:"help",paraId:20,tocIndex:48},{value:"提示信息，如不设置，则会根据校验规则自动生成",paraId:20,tocIndex:48},{value:"ReactNode",paraId:20,tocIndex:48},{value:"-",paraId:20,tocIndex:48},{value:"hidden",paraId:20,tocIndex:48},{value:"是否隐藏字段（依然会收集和校验字段）",paraId:20,tocIndex:48},{value:"boolean",paraId:20,tocIndex:48},{value:"false",paraId:20,tocIndex:48},{value:"htmlFor",paraId:20,tocIndex:48},{value:"设置子元素 label ",paraId:20,tocIndex:48},{value:"htmlFor",paraId:20,tocIndex:48},{value:" 属性",paraId:20,tocIndex:48},{value:"string",paraId:20,tocIndex:48},{value:"-",paraId:20,tocIndex:48},{value:"initialValue",paraId:20,tocIndex:48},{value:"设置子元素默认值，如果与 Form 的 ",paraId:20,tocIndex:48},{value:"initialValues",paraId:20,tocIndex:48},{value:" 冲突则以 Form 为准",paraId:20,tocIndex:48},{value:"string",paraId:20,tocIndex:48},{value:"-",paraId:20,tocIndex:48},{value:"label",paraId:20,tocIndex:48},{value:"label",paraId:20,tocIndex:48},{value:" 标签的文本",paraId:20,tocIndex:48},{value:"ReactNode",paraId:20,tocIndex:48},{value:"-",paraId:20,tocIndex:48},{value:"labelAlign",paraId:20,tocIndex:48},{value:"标签文本对齐方式",paraId:20,tocIndex:48},{value:"left",paraId:20,tocIndex:48},{value:"、 ",paraId:20,tocIndex:48},{value:"right",paraId:20,tocIndex:48},{value:"right",paraId:20,tocIndex:48},{value:"labelWidth",paraId:20,tocIndex:48},{value:"标签的长度，例如 '50px', 可以使用 auto。",paraId:20,tocIndex:48},{value:"string、 number",paraId:20,tocIndex:48},{value:"'auto'",paraId:20,tocIndex:48},{value:"layout",paraId:20,tocIndex:48},{value:"表单项布局",paraId:20,tocIndex:48},{value:"horizontal",paraId:20,tocIndex:48},{value:"、 ",paraId:20,tocIndex:48},{value:"vertical",paraId:20,tocIndex:48},{value:"-",paraId:20,tocIndex:48},{value:"messageVariables",paraId:20,tocIndex:48},{value:"默认验证字段的信息，查看",paraId:20,tocIndex:48},{value:"详情",paraId:25,tocIndex:48},{value:"Record<string, string>",paraId:20,tocIndex:48},{value:"-",paraId:20,tocIndex:48},{value:"name",paraId:20,tocIndex:48},{value:"字段名，支持数组",paraId:20,tocIndex:48},{value:"NamePath",paraId:26,tocIndex:48},{value:"-",paraId:20,tocIndex:48},{value:"normalize",paraId:20,tocIndex:48},{value:"组件获取值后进行转换，再放入 Form 中。不支持异步",paraId:20,tocIndex:48},{value:"(value, prevValue, prevValues) => any",paraId:20,tocIndex:48},{value:"-",paraId:20,tocIndex:48},{value:"noStyle",paraId:20,tocIndex:48},{value:"为 ",paraId:20,tocIndex:48},{value:"true",paraId:20,tocIndex:48},{value:" 时不带样式，作为纯字段控件使用。当自身没有 ",paraId:20,tocIndex:48},{value:"validateStatus",paraId:20,tocIndex:48},{value:" 而父元素存在有 ",paraId:20,tocIndex:48},{value:"validateStatus",paraId:20,tocIndex:48},{value:" 的 Form.Item 会继承父元素的 ",paraId:20,tocIndex:48},{value:"validateStatus",paraId:20,tocIndex:48},{value:"boolean",paraId:20,tocIndex:48},{value:"false",paraId:20,tocIndex:48},{value:"preserve",paraId:20,tocIndex:48},{value:"当字段被删除时保留字段值",paraId:20,tocIndex:48},{value:"boolean",paraId:20,tocIndex:48},{value:"true",paraId:20,tocIndex:48},{value:"required",paraId:20,tocIndex:48},{value:"必填样式设置。如不设置，则会根据校验规则自动生成",paraId:20,tocIndex:48},{value:"boolean",paraId:20,tocIndex:48},{value:"false",paraId:20,tocIndex:48},{value:"rules",paraId:20,tocIndex:48},{value:"校验规则，设置字段的校验逻辑。点击",paraId:20,tocIndex:48},{value:"此处",paraId:27,tocIndex:48},{value:"查看示例",paraId:20,tocIndex:48},{value:"Rule",paraId:28,tocIndex:48},{value:"[]",paraId:20,tocIndex:48},{value:"-",paraId:20,tocIndex:48},{value:"shouldUpdate",paraId:20,tocIndex:48},{value:"自定义字段更新逻辑，说明",paraId:20,tocIndex:48},{value:"见下",paraId:29,tocIndex:48},{value:"boolean、 (prevValue, curValue) => boolean",paraId:20,tocIndex:48},{value:"false",paraId:20,tocIndex:48},{value:"span",paraId:20,tocIndex:48},{value:"在栅格中显示列数, 可以写成像素值或支持响应式的对象写法 ",paraId:20,tocIndex:48},{value:"{ xs: 2, sm: 3, md: 4}",paraId:20,tocIndex:48},{value:"number、 Record<Breakpoint, number>",paraId:20,tocIndex:48},{value:"'auto'",paraId:20,tocIndex:48},{value:"tooltip",paraId:20,tocIndex:48},{value:"配置提示信息",paraId:20,tocIndex:48},{value:"ReactNode、 ",paraId:20,tocIndex:48},{value:"TooltipProps & { icon: ReactNode }",paraId:30,tocIndex:48},{value:"-",paraId:20,tocIndex:48},{value:"trigger",paraId:20,tocIndex:48},{value:"设置收集字段值变更的时机。点击",paraId:20,tocIndex:48},{value:"此处",paraId:31,tocIndex:48},{value:"查看示例",paraId:20,tocIndex:48},{value:"string",paraId:20,tocIndex:48},{value:"onChange",paraId:20,tocIndex:48},{value:"validateDebounce",paraId:20,tocIndex:48},{value:"设置防抖，延迟毫秒数后进行校验",paraId:20,tocIndex:48},{value:"number",paraId:20,tocIndex:48},{value:"-",paraId:20,tocIndex:48},{value:"validateFirst",paraId:20,tocIndex:48},{value:"当某一规则校验不通过时，是否停止剩下的规则的校验。设置 ",paraId:20,tocIndex:48},{value:"parallel",paraId:20,tocIndex:48},{value:" 时会并行校验",paraId:20,tocIndex:48},{value:"boolean、 ",paraId:20,tocIndex:48},{value:"parallel",paraId:20,tocIndex:48},{value:"false",paraId:20,tocIndex:48},{value:"validateStatus",paraId:20,tocIndex:48},{value:"校验状态，如不设置，则会根据校验规则自动生成，可选：'success' 'warning' 'error' 'validating'",paraId:20,tocIndex:48},{value:"string",paraId:20,tocIndex:48},{value:"-",paraId:20,tocIndex:48},{value:"validateTrigger",paraId:20,tocIndex:48},{value:"设置字段校验的时机",paraId:20,tocIndex:48},{value:"string、 string[]",paraId:20,tocIndex:48},{value:"onChange",paraId:20,tocIndex:48},{value:"valuePropName",paraId:20,tocIndex:48},{value:"子节点的值的属性。注意：Switch、Checkbox 的 valuePropName 应该是 ",paraId:20,tocIndex:48},{value:"checked",paraId:20,tocIndex:48},{value:"，否则无法获取这个两个组件的值。该属性为 ",paraId:20,tocIndex:48},{value:"getValueProps",paraId:20,tocIndex:48},{value:" 的封装，自定义 ",paraId:20,tocIndex:48},{value:"getValueProps",paraId:20,tocIndex:48},{value:" 后会失效",paraId:20,tocIndex:48},{value:"string",paraId:20,tocIndex:48},{value:"value",paraId:20,tocIndex:48},{value:"被设置了 ",paraId:32,tocIndex:48},{value:"name",paraId:32,tocIndex:48},{value:" 属性的 ",paraId:32,tocIndex:48},{value:"Form.Item",paraId:32,tocIndex:48},{value:" 包装的控件，表单控件会自动添加 ",paraId:32,tocIndex:48},{value:"value",paraId:32,tocIndex:48},{value:"（或 ",paraId:32,tocIndex:48},{value:"valuePropName",paraId:32,tocIndex:48},{value:" 指定的其他属性） ",paraId:32,tocIndex:48},{value:"onChange",paraId:32,tocIndex:48},{value:"（或 ",paraId:32,tocIndex:48},{value:"trigger",paraId:32,tocIndex:48},{value:" 指定的其他属性），数据同步将被 Form 接管，这会导致以下结果：",paraId:32,tocIndex:48},{value:"你",paraId:33,tocIndex:48},{value:"不再需要也不应该",paraId:33,tocIndex:48},{value:"用 ",paraId:33,tocIndex:48},{value:"onChange",paraId:33,tocIndex:48},{value:" 来做数据收集同步（你可以使用 Form 的 ",paraId:33,tocIndex:48},{value:"onValuesChange",paraId:33,tocIndex:48},{value:"），但还是可以继续监听 ",paraId:33,tocIndex:48},{value:"onChange",paraId:33,tocIndex:48},{value:" 事件。",paraId:33,tocIndex:48},{value:"你不能用控件的 ",paraId:33,tocIndex:48},{value:"value",paraId:33,tocIndex:48},{value:" 或 ",paraId:33,tocIndex:48},{value:"defaultValue",paraId:33,tocIndex:48},{value:" 等属性来设置表单域的值，默认值可以用 Form 里的 ",paraId:33,tocIndex:48},{value:"initialValues",paraId:33,tocIndex:48},{value:" 来设置。注意 ",paraId:33,tocIndex:48},{value:"initialValues",paraId:33,tocIndex:48},{value:" 不能被 ",paraId:33,tocIndex:48},{value:"setState",paraId:33,tocIndex:48},{value:" 动态更新，你需要用 ",paraId:33,tocIndex:48},{value:"setFieldsValue",paraId:33,tocIndex:48},{value:" 来更新。",paraId:33,tocIndex:48},{value:"你不应该用 ",paraId:33,tocIndex:48},{value:"setState",paraId:33,tocIndex:48},{value:"，可以使用 ",paraId:33,tocIndex:48},{value:"form.setFieldsValue",paraId:33,tocIndex:48},{value:" 来动态改变表单值。",paraId:33,tocIndex:48},{value:"当字段间存在依赖关系时使用。如果一个字段设置了 ",paraId:34,tocIndex:49},{value:"dependencies",paraId:34,tocIndex:49},{value:" 属性。那么它所依赖的字段更新时，该字段将自动触发更新与校验。一种常见的场景，就是注册用户表单的“密码”与“确认密码”字段。“确认密码”校验依赖于“密码”字段，设置 ",paraId:34,tocIndex:49},{value:"dependencies",paraId:34,tocIndex:49},{value:" 后，“密码”字段更新会重新触发“校验密码”的校验逻辑。你可以参考",paraId:34,tocIndex:49},{value:"具体例子",paraId:35,tocIndex:49},{value:"。",paraId:34,tocIndex:49},{value:"dependencies",paraId:36,tocIndex:49},{value:" 不应和 ",paraId:36,tocIndex:49},{value:"shouldUpdate",paraId:36,tocIndex:49},{value:" 一起使用，因为这可能带来更新逻辑的混乱。",paraId:36,tocIndex:49},{value:"({ status: ValidateStatus, errors: ReactNode, warnings: ReactNode }) => Record<ValidateStatus, ReactNode>",paraId:37,tocIndex:50},{value:"Form 通过增量更新方式，只更新被修改的字段相关组件以达到性能优化目的。大部分场景下，你只需要编写代码或者与 ",paraId:38,tocIndex:51},{value:"dependencies",paraId:39,tocIndex:51},{value:" 属性配合校验即可。而在某些特定场景，例如修改某个字段值后出现新的字段选项、或者纯粹希望表单任意变化都对某一个区域进行渲染。你可以通过 ",paraId:38,tocIndex:51},{value:"shouldUpdate",paraId:38,tocIndex:51},{value:" 修改 Form.Item 的更新逻辑。",paraId:38,tocIndex:51},{value:"当 ",paraId:40,tocIndex:51},{value:"shouldUpdate",paraId:40,tocIndex:51},{value:" 为 ",paraId:40,tocIndex:51},{value:"true",paraId:40,tocIndex:51},{value:" 时，Form 的任意变化都会使该 Form.Item 重新渲染。这对于自定义渲染一些区域十分有帮助，要注意 Form.Item 里包裹的子组件必须由函数返回，否则 ",paraId:40,tocIndex:51},{value:"shouldUpdate",paraId:40,tocIndex:51},{value:" 不会起作用：",paraId:40,tocIndex:51},{value:"<Form.Item shouldUpdate>\n  {() => {\n    return <pre>{JSON.stringify(form.getFieldsValue(), null, 2)}</pre>;\n  }}\n</Form.Item>\n",paraId:41,tocIndex:51},{value:"你可以参考",paraId:42,tocIndex:51},{value:"示例",paraId:43,tocIndex:51},{value:"查看具体使用场景。",paraId:42,tocIndex:51},{value:"当 ",paraId:44,tocIndex:51},{value:"shouldUpdate",paraId:44,tocIndex:51},{value:" 为方法时，表单的每次数值更新都会调用该方法，提供原先的值与当前的值以供你比较是否需要更新。这对于是否根据值来渲染额外字段十分有帮助：",paraId:44,tocIndex:51},{value:'<Form.Item shouldUpdate={(prevValues, curValues) => prevValues.additional !== curValues.additional}>\n  {() => {\n    return (\n      <Form.Item name="other">\n        <Input />\n      </Form.Item>\n    );\n  }}\n</Form.Item>\n',paraId:45,tocIndex:51},{value:"你可以参考",paraId:46,tocIndex:51},{value:"示例",paraId:47,tocIndex:51},{value:"查看具体使用场景。",paraId:46,tocIndex:51},{value:"你可以通过 ",paraId:48,tocIndex:52},{value:"messageVariables",paraId:48,tocIndex:52},{value:" 修改 Form.Item 的默认验证信息。",paraId:48,tocIndex:52},{value:"<Form>\n  <Form.Item\n    messageVariables={{ another: 'good' }}\n    label=\"user\"\n    rules={[{ required: true, message: '${another} is required' }]}\n  >\n    <Input />\n  </Form.Item>\n  <Form.Item\n    messageVariables={{ label: 'good' }}\n    label={<span>user</span>}\n    rules={[{ required: true, message: '${label} is required' }]}\n  >\n    <Input />\n  </Form.Item>\n</Form>\n",paraId:49,tocIndex:52},{value:"自 `",paraId:50,tocIndex:52},{value:"起，当你希望不要转译",paraId:50,tocIndex:52},{value:"${}",paraId:50,tocIndex:52},{value:"时，你可以通过",paraId:50,tocIndex:52},{value:"\\${}` 来略过：",paraId:50,tocIndex:52},{value:"{ required: true, message: '${label} is convert, \\\\${label} is not convert' }\n\n// good is convert, ${label} is not convert\n",paraId:51,tocIndex:52},{value:"为字段提供数组化管理。",paraId:52,tocIndex:53},{value:"参数",paraId:53,tocIndex:53},{value:"说明",paraId:53,tocIndex:53},{value:"类型",paraId:53,tocIndex:53},{value:"默认值",paraId:53,tocIndex:53},{value:"版本",paraId:53,tocIndex:53},{value:"children",paraId:53,tocIndex:53},{value:"渲染函数",paraId:53,tocIndex:53},{value:"(fields: Field[], operation: { add, remove, move }, meta: { errors }) => React.ReactNode",paraId:53,tocIndex:53},{value:"-",paraId:53,tocIndex:53},{value:"initialValue",paraId:53,tocIndex:53},{value:"设置子元素默认值，如果与 Form 的 ",paraId:53,tocIndex:53},{value:"initialValues",paraId:53,tocIndex:53},{value:" 冲突则以 Form 为准",paraId:53,tocIndex:53},{value:"any[]",paraId:53,tocIndex:53},{value:"-",paraId:53,tocIndex:53},{value:"name",paraId:53,tocIndex:53},{value:"字段名，支持数组。List 本身也是字段，因而 ",paraId:53,tocIndex:53},{value:"getFieldsValue()",paraId:53,tocIndex:53},{value:" 默认会返回 List 下所有值，你可以通过",paraId:53,tocIndex:53},{value:"参数",paraId:54,tocIndex:53},{value:"改变这一行为",paraId:53,tocIndex:53},{value:"NamePath",paraId:55,tocIndex:53},{value:"-",paraId:53,tocIndex:53},{value:"rules",paraId:53,tocIndex:53},{value:"校验规则，仅支持自定义规则。需要配合 ",paraId:53,tocIndex:53},{value:"ErrorList",paraId:56,tocIndex:53},{value:" 一同使用。",paraId:53,tocIndex:53},{value:"{ validator, message }[]",paraId:53,tocIndex:53},{value:"-",paraId:53,tocIndex:53},{value:"<Form.List>\n  {(fields) =>\n    fields.map((field) => (\n      <Form.Item {...field}>\n        <Input />\n      </Form.Item>\n    ))\n  }\n</Form.List>\n",paraId:57,tocIndex:53},{value:"注意：Form.List 下的字段不应该配置 ",paraId:58,tocIndex:53},{value:"initialValue",paraId:58,tocIndex:53},{value:"，你始终应该通过 Form.List 的 ",paraId:58,tocIndex:53},{value:"initialValue",paraId:58,tocIndex:53},{value:" 或者 Form 的 ",paraId:58,tocIndex:53},{value:"initialValues",paraId:58,tocIndex:53},{value:" 来配置。",paraId:58,tocIndex:53},{value:"Form.List 渲染表单相关操作函数。",paraId:59,tocIndex:54},{value:"参数",paraId:60,tocIndex:54},{value:"说明",paraId:60,tocIndex:54},{value:"类型",paraId:60,tocIndex:54},{value:"默认值",paraId:60,tocIndex:54},{value:"版本",paraId:60,tocIndex:54},{value:"add",paraId:60,tocIndex:54},{value:"新增表单项",paraId:60,tocIndex:54},{value:"(defaultValue?: any, insertIndex?: number) => void",paraId:60,tocIndex:54},{value:"insertIndex",paraId:60,tocIndex:54},{value:"move",paraId:60,tocIndex:54},{value:"移动表单项",paraId:60,tocIndex:54},{value:"(from: number, to: number) => void",paraId:60,tocIndex:54},{value:"-",paraId:60,tocIndex:54},{value:"remove",paraId:60,tocIndex:54},{value:"删除表单项",paraId:60,tocIndex:54},{value:"(index: number、 number[]) => void",paraId:60,tocIndex:54},{value:"number[]",paraId:60,tocIndex:54},{value:"错误展示组件，仅限配合 Form.List 的 rules 一同使用。参考",paraId:61,tocIndex:55},{value:"示例",paraId:62,tocIndex:55},{value:"。",paraId:61,tocIndex:55},{value:"参数",paraId:63,tocIndex:55},{value:"说明",paraId:63,tocIndex:55},{value:"类型",paraId:63,tocIndex:55},{value:"默认值",paraId:63,tocIndex:55},{value:"errors",paraId:63,tocIndex:55},{value:"错误列表",paraId:63,tocIndex:55},{value:"ReactNode[]",paraId:63,tocIndex:55},{value:"-",paraId:63,tocIndex:55},{value:"提供表单间联动功能，其下设置 ",paraId:64,tocIndex:56},{value:"name",paraId:64,tocIndex:56},{value:" 的 Form 更新时，会自动触发对应事件。查看",paraId:64,tocIndex:56},{value:"示例",paraId:65,tocIndex:56},{value:"。",paraId:64,tocIndex:56},{value:"参数",paraId:66,tocIndex:56},{value:"说明",paraId:66,tocIndex:56},{value:"类型",paraId:66,tocIndex:56},{value:"默认值",paraId:66,tocIndex:56},{value:"onFormChange",paraId:66,tocIndex:56},{value:"子表单字段更新时触发",paraId:66,tocIndex:56},{value:"function(formName: string, info: { changedFields, forms })",paraId:66,tocIndex:56},{value:"-",paraId:66,tocIndex:56},{value:"onFormFinish",paraId:66,tocIndex:56},{value:"子表单提交时触发",paraId:66,tocIndex:56},{value:"function(formName: string, info: { values, forms })",paraId:66,tocIndex:56},{value:"-",paraId:66,tocIndex:56},{value:'<Form.Provider\n  onFormFinish={(name) => {\n    if (name === \'form1\') {\n      // Do something...\n    }\n  }}\n>\n  <Form name="form1">...</Form>\n  <Form name="form2">...</Form>\n</Form.Provider>\n',paraId:67,tocIndex:56},{value:"名称",paraId:68,tocIndex:57},{value:"说明",paraId:68,tocIndex:57},{value:"类型",paraId:68,tocIndex:57},{value:"版本",paraId:68,tocIndex:57},{value:"getFieldError",paraId:68,tocIndex:57},{value:"获取对应字段名的错误信息",paraId:68,tocIndex:57},{value:"(name: ",paraId:68,tocIndex:57},{value:"NamePath",paraId:69,tocIndex:57},{value:") => string[]",paraId:68,tocIndex:57},{value:"getFieldInstance",paraId:68,tocIndex:57},{value:"获取对应字段实例",paraId:68,tocIndex:57},{value:"(name: ",paraId:68,tocIndex:57},{value:"NamePath",paraId:70,tocIndex:57},{value:") => any",paraId:68,tocIndex:57},{value:"getFieldsError",paraId:68,tocIndex:57},{value:"获取一组字段名对应的错误信息，返回为数组形式",paraId:68,tocIndex:57},{value:"(nameList?: ",paraId:68,tocIndex:57},{value:"NamePath",paraId:71,tocIndex:57},{value:"[]) => FieldError[]",paraId:68,tocIndex:57},{value:"getFieldsValue",paraId:68,tocIndex:57},{value:"获取一组字段名对应的值，会按照对应结构返回。默认返回现存字段值，当调用 ",paraId:68,tocIndex:57},{value:"getFieldsValue(true)",paraId:68,tocIndex:57},{value:" 时返回所有值",paraId:68,tocIndex:57},{value:"GetFieldsValue",paraId:72,tocIndex:57},{value:"getFieldValue",paraId:68,tocIndex:57},{value:"获取对应字段名的值",paraId:68,tocIndex:57},{value:"(name: ",paraId:68,tocIndex:57},{value:"NamePath",paraId:73,tocIndex:57},{value:") => any",paraId:68,tocIndex:57},{value:"isFieldsTouched",paraId:68,tocIndex:57},{value:"检查一组字段是否被用户操作过，",paraId:68,tocIndex:57},{value:"allTouched",paraId:68,tocIndex:57},{value:" 为 ",paraId:68,tocIndex:57},{value:"true",paraId:68,tocIndex:57},{value:" 时检查是否所有字段都被操作过",paraId:68,tocIndex:57},{value:"(nameList?: ",paraId:68,tocIndex:57},{value:"NamePath",paraId:74,tocIndex:57},{value:"[], allTouched?: boolean) => boolean",paraId:68,tocIndex:57},{value:"isFieldTouched",paraId:68,tocIndex:57},{value:"检查对应字段是否被用户操作过",paraId:68,tocIndex:57},{value:"(name: ",paraId:68,tocIndex:57},{value:"NamePath",paraId:75,tocIndex:57},{value:") => boolean",paraId:68,tocIndex:57},{value:"isFieldValidating",paraId:68,tocIndex:57},{value:"检查对应字段是否正在校验",paraId:68,tocIndex:57},{value:"(name: ",paraId:68,tocIndex:57},{value:"NamePath",paraId:76,tocIndex:57},{value:") => boolean",paraId:68,tocIndex:57},{value:"resetFields",paraId:68,tocIndex:57},{value:"重置一组字段到 ",paraId:68,tocIndex:57},{value:"initialValues",paraId:68,tocIndex:57},{value:"(fields?: ",paraId:68,tocIndex:57},{value:"NamePath",paraId:77,tocIndex:57},{value:"[]) => void",paraId:68,tocIndex:57},{value:"scrollToField",paraId:68,tocIndex:57},{value:"滚动到对应字段位置",paraId:68,tocIndex:57},{value:"(name: ",paraId:68,tocIndex:57},{value:"NamePath",paraId:78,tocIndex:57},{value:", options: ",paraId:68,tocIndex:57},{value:"ScrollOptions",paraId:68,tocIndex:57},{value:") => void",paraId:68,tocIndex:57},{value:"setFields",paraId:68,tocIndex:57},{value:"设置一组字段状态",paraId:68,tocIndex:57},{value:"(fields: ",paraId:68,tocIndex:57},{value:"FieldData",paraId:79,tocIndex:57},{value:"[]) => void",paraId:68,tocIndex:57},{value:"setFieldsValue",paraId:68,tocIndex:57},{value:"设置表单的值（该值将直接传入 form store 中并且",paraId:68,tocIndex:57},{value:"重置错误信息",paraId:68,tocIndex:57},{value:"。如果你不希望传入对象被修改，请克隆后传入）。如果你只想修改 Form.List 中单项值，请通过 ",paraId:68,tocIndex:57},{value:"setFieldValue",paraId:68,tocIndex:57},{value:" 进行指定",paraId:68,tocIndex:57},{value:"(values) => void",paraId:68,tocIndex:57},{value:"setFieldValue",paraId:68,tocIndex:57},{value:"设置表单的值（该值将直接传入 form store 中并且",paraId:68,tocIndex:57},{value:"重置错误信息",paraId:68,tocIndex:57},{value:"。如果你不希望传入对象被修改，请克隆后传入）",paraId:68,tocIndex:57},{value:"(name: ",paraId:68,tocIndex:57},{value:"NamePath",paraId:80,tocIndex:57},{value:", value: any) => void",paraId:68,tocIndex:57},{value:"submit",paraId:68,tocIndex:57},{value:"提交表单，与点击 ",paraId:68,tocIndex:57},{value:"submit",paraId:68,tocIndex:57},{value:" 按钮效果相同",paraId:68,tocIndex:57},{value:"() => void",paraId:68,tocIndex:57},{value:"validateFields",paraId:68,tocIndex:57},{value:"触发表单验证，设置 ",paraId:68,tocIndex:57},{value:"recursive",paraId:68,tocIndex:57},{value:" 时会递归校验所有包含的路径",paraId:68,tocIndex:57},{value:"(nameList?: ",paraId:68,tocIndex:57},{value:"NamePath",paraId:81,tocIndex:57},{value:"[], config?: ",paraId:68,tocIndex:57},{value:"ValidateConfig",paraId:82,tocIndex:57},{value:") => Promise",paraId:68,tocIndex:57},{value:"export interface ValidateConfig {\n  // 仅校验内容而不会将错误信息展示到 UI 上。\n  validateOnly?: boolean;\n  // 对提供的 `nameList` 与其子路径进行递归校验。\n  recursive?: boolean;\n  // 校验 dirty 的字段（touched + validated）。\n  // 使用 `dirty` 可以很方便的仅校验用户操作过和被校验过的字段。\n  dirty?: boolean;\n}\n",paraId:83,tocIndex:58},{value:"返回示例：",paraId:84,tocIndex:58},{value:"validateFields()\n  .then((values) => {\n    /*\n  values:\n    {\n      username: 'username',\n      password: 'password',\n    }\n  */\n  })\n  .catch((errorInfo) => {\n    /*\n    errorInfo:\n      {\n        values: {\n          username: 'username',\n          password: 'password',\n        },\n        errorFields: [\n          { name: ['password'], errors: ['Please input your Password!'] },\n        ],\n        outOfDate: false,\n      }\n    */\n  });\n",paraId:85,tocIndex:58},{value:"type Form.useForm = (): [FormInstance]",paraId:86,tocIndex:60},{value:"创建 Form 实例，用于管理所有数据状态。",paraId:87,tocIndex:60},{value:"type Form.useFormInstance = (): FormInstance",paraId:88,tocIndex:61},{value:"`` 新增，获取当前上下文正在使用的 Form 实例，常见于封装子组件消费无需透传 Form 实例：",paraId:89,tocIndex:61},{value:"const Sub = () => {\n  const form = Form.useFormInstance();\n\n  return <Button onClick={() => form.setFieldsValue({})} />;\n};\n\nexport default () => {\n  const [form] = Form.useForm();\n\n  return (\n    <Form form={form}>\n      <Sub />\n    </Form>\n  );\n};\n",paraId:90,tocIndex:61},{value:"type Form.useWatch = (namePath: NamePath | (selector: (values: Store)) => any, formInstance?: FormInstance | WatchOptions): Value",paraId:91,tocIndex:62},{value:"`",paraId:92,tocIndex:62},{value:"新增",paraId:92,tocIndex:62},{value:"selector`",paraId:92,tocIndex:62},{value:"用于直接获取 form 中字段对应的值。通过该 Hooks 可以与诸如 ",paraId:93,tocIndex:62},{value:"useSWR",paraId:93,tocIndex:62},{value:" 进行联动从而降低维护成本：",paraId:93,tocIndex:62},{value:"const Demo = () => {\n  const [form] = Form.useForm();\n  const userName = Form.useWatch('username', form);\n\n  const { data: options } = useSWR(`/api/user/${userName}`, fetcher);\n\n  return (\n    <Form form={form}>\n      <Form.Item name=\"username\">\n        <AutoComplete options={options} />\n      </Form.Item>\n    </Form>\n  );\n};\n",paraId:94,tocIndex:62},{value:"如果你的组件被包裹在 ",paraId:95,tocIndex:62},{value:"Form.Item",paraId:95,tocIndex:62},{value:" 内部，你可以省略第二个参数，",paraId:95,tocIndex:62},{value:"Form.useWatch",paraId:95,tocIndex:62},{value:" 会自动找到上层最近的 ",paraId:95,tocIndex:62},{value:"FormInstance",paraId:95,tocIndex:62},{value:"。",paraId:95,tocIndex:62},{value:"useWatch",paraId:96,tocIndex:62},{value:" 默认只监听在 Form 中注册的字段，如果需要监听非注册字段，可以通过配置 ",paraId:96,tocIndex:62},{value:"preserve",paraId:96,tocIndex:62},{value:" 进行监听：",paraId:96,tocIndex:62},{value:"const Demo = () => {\n  const [form] = Form.useForm();\n\n  const age = Form.useWatch('age', { form, preserve: true });\n  console.log(age);\n\n  return (\n    <div>\n      <Button onClick={() => form.setFieldValue('age', 2)}>Update</Button>\n      <Form form={form}>\n        <Form.Item name=\"name\">\n          <Input />\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n",paraId:97,tocIndex:62},{value:"type Form.Item.useStatus = (): { status: ValidateStatus | undefined, errors: ReactNode[], warnings: ReactNode[] }",paraId:98,tocIndex:63},{value:" 新增，可用于获取当前 Form.Item 的校验状态，如果上层没有 Form.Item，`status` 将会返回 `undefined`。",paraId:99,tocIndex:63},{value:" 新增 ",paraId:99,tocIndex:63},{value:"errors",paraId:99,tocIndex:63},{value:" 和 ",paraId:99,tocIndex:63},{value:"warnings",paraId:99,tocIndex:63},{value:"，可用于获取当前 Form.Item 的错误信息和警告信息：",paraId:99,tocIndex:63},{value:"const CustomInput = ({ value, onChange }) => {\n  const { status, errors } = Form.Item.useStatus();\n  return (\n    <input\n      value={value}\n      onChange={onChange}\n      className={`custom-input-${status}`}\n      placeholder={(errors.length && errors[0]) || ''}\n    />\n  );\n};\n\nexport default () => (\n  <Form>\n    <Form.Item name=\"username\">\n      <CustomInput />\n    </Form.Item>\n  </Form>\n);\n",paraId:100,tocIndex:63},{value:"Form 仅会对变更的 Field 进行刷新，从而避免完整的组件刷新可能引发的性能问题。因而你无法在 render 阶段通过 ",paraId:101,tocIndex:64},{value:"form.getFieldsValue",paraId:101,tocIndex:64},{value:" 来实时获取字段值，而 ",paraId:101,tocIndex:64},{value:"useWatch",paraId:101,tocIndex:64},{value:" 提供了一种特定字段访问的方式，从而使得在当前组件中可以直接消费字段的值。同时，如果为了更好的渲染性能，你可以通过 Field 的 renderProps 仅更新需要更新的部分。而当当前组件更新或者 effect 都不需要消费字段值时，则可以通过 ",paraId:101,tocIndex:64},{value:"onValuesChange",paraId:101,tocIndex:64},{value:" 将数据抛出，从而避免组件更新。",paraId:101,tocIndex:64},{value:"string | number | (string | number)[]",paraId:102,tocIndex:66},{value:"getFieldsValue",paraId:103,tocIndex:67},{value:" 提供了多种重载方法：",paraId:103,tocIndex:67},{value:"NamePath",paraId:104,tocIndex:67},{value:"当不提供 ",paraId:105,tocIndex:68},{value:"nameList",paraId:105,tocIndex:68},{value:" 时，返回所有注册字段，这也包含 List 下所有的值（即便 List 下没有绑定 Item）。",paraId:105,tocIndex:68},{value:"当 ",paraId:106,tocIndex:68},{value:"nameList",paraId:106,tocIndex:68},{value:" 为 ",paraId:106,tocIndex:68},{value:"true",paraId:106,tocIndex:68},{value:" 时，返回 store 中所有的值，包含未注册字段。例如通过 ",paraId:106,tocIndex:68},{value:"setFieldsValue",paraId:106,tocIndex:68},{value:" 设置了不存在的 Item 的值，也可以通过 ",paraId:106,tocIndex:68},{value:"true",paraId:106,tocIndex:68},{value:" 全部获取。",paraId:106,tocIndex:68},{value:"当 ",paraId:107,tocIndex:68},{value:"nameList",paraId:107,tocIndex:68},{value:" 为数组时，返回规定路径的值。需要注意的是，",paraId:107,tocIndex:68},{value:"nameList",paraId:107,tocIndex:68},{value:" 为嵌套数组。例如你需要某路径值应该如下：",paraId:107,tocIndex:68},{value:"// 单个路径\nform.getFieldsValue([['user', 'age']]);\n\n// 多个路径\nform.getFieldsValue([\n  ['user', 'age'],\n  ['preset', 'account'],\n]);\n",paraId:108,tocIndex:68},{value:"`",paraId:109,tocIndex:69},{value:"新增接受配置参数。当",paraId:109,tocIndex:69},{value:"strict",paraId:109,tocIndex:69},{value:"为",paraId:109,tocIndex:69},{value:"true",paraId:109,tocIndex:69},{value:"时会仅匹配 Item 的值。例如",paraId:109,tocIndex:69},{value:"{ list: [{ bamboo: 1, little: 2 }] }",paraId:109,tocIndex:69},{value:"中，如果 List 仅绑定了",paraId:109,tocIndex:69},{value:"bamboo",paraId:109,tocIndex:69},{value:"字段，那么",paraId:109,tocIndex:69},{value:"getFieldsValue({ strict: true })",paraId:109,tocIndex:69},{value:"会只获得",paraId:109,tocIndex:69},{value:"{ list: [{ bamboo: 1 }] }`。",paraId:109,tocIndex:69},{value:"用于过滤一些字段值，",paraId:110,tocIndex:70},{value:"meta",paraId:110,tocIndex:70},{value:" 会返回字段相关信息。例如可以用来获取仅被用户修改过的值等等。",paraId:110,tocIndex:70},{value:"type FilterFunc = (meta: { touched: boolean; validating: boolean }) => boolean;\n",paraId:111,tocIndex:70},{value:"名称",paraId:112,tocIndex:71},{value:"说明",paraId:112,tocIndex:71},{value:"类型",paraId:112,tocIndex:71},{value:"errors",paraId:112,tocIndex:71},{value:"错误信息",paraId:112,tocIndex:71},{value:"string[]",paraId:112,tocIndex:71},{value:"name",paraId:112,tocIndex:71},{value:"字段名称",paraId:112,tocIndex:71},{value:"NamePath",paraId:113,tocIndex:71},{value:"[]",paraId:112,tocIndex:71},{value:"touched",paraId:112,tocIndex:71},{value:"是否被用户操作过",paraId:112,tocIndex:71},{value:"boolean",paraId:112,tocIndex:71},{value:"validating",paraId:112,tocIndex:71},{value:"是否正在校验",paraId:112,tocIndex:71},{value:"boolean",paraId:112,tocIndex:71},{value:"value",paraId:112,tocIndex:71},{value:"字段对应值",paraId:112,tocIndex:71},{value:"any",paraId:112,tocIndex:71},{value:"warnings",paraId:112,tocIndex:71},{value:"警告信息",paraId:112,tocIndex:71},{value:"string[]",paraId:112,tocIndex:71},{value:"Rule 支持接收 object 进行配置，也支持 function 来动态获取 form 的数据：",paraId:114,tocIndex:72},{value:"type Rule = RuleConfig | ((form: FormInstance) => RuleConfig);\n",paraId:115,tocIndex:72},{value:"名称",paraId:116,tocIndex:72},{value:"说明",paraId:116,tocIndex:72},{value:"类型",paraId:116,tocIndex:72},{value:"版本",paraId:116,tocIndex:72},{value:"defaultField",paraId:116,tocIndex:72},{value:"仅在 ",paraId:116,tocIndex:72},{value:"type",paraId:116,tocIndex:72},{value:" 为 ",paraId:116,tocIndex:72},{value:"array",paraId:116,tocIndex:72},{value:" 类型时有效，用于指定数组元素的校验规则",paraId:116,tocIndex:72},{value:"rule",paraId:117,tocIndex:72},{value:"enum",paraId:116,tocIndex:72},{value:"是否匹配枚举中的值（需要将 ",paraId:116,tocIndex:72},{value:"type",paraId:116,tocIndex:72},{value:" 设置为 ",paraId:116,tocIndex:72},{value:"enum",paraId:116,tocIndex:72},{value:"）",paraId:116,tocIndex:72},{value:"any[]",paraId:116,tocIndex:72},{value:"fields",paraId:116,tocIndex:72},{value:"仅在 ",paraId:116,tocIndex:72},{value:"type",paraId:116,tocIndex:72},{value:" 为 ",paraId:116,tocIndex:72},{value:"array",paraId:116,tocIndex:72},{value:" 或 ",paraId:116,tocIndex:72},{value:"object",paraId:116,tocIndex:72},{value:" 类型时有效，用于指定子元素的校验规则",paraId:116,tocIndex:72},{value:"Record<string, ",paraId:116,tocIndex:72},{value:"rule",paraId:118,tocIndex:72},{value:">",paraId:116,tocIndex:72},{value:"len",paraId:116,tocIndex:72},{value:"string 类型时为字符串长度；number 类型时为确定数字； array 类型时为数组长度",paraId:116,tocIndex:72},{value:"number",paraId:116,tocIndex:72},{value:"max",paraId:116,tocIndex:72},{value:"必须设置 ",paraId:116,tocIndex:72},{value:"type",paraId:116,tocIndex:72},{value:"：string 类型为字符串最大长度；number 类型时为最大值；array 类型时为数组最大长度",paraId:116,tocIndex:72},{value:"number",paraId:116,tocIndex:72},{value:"message",paraId:116,tocIndex:72},{value:"错误信息，不设置时会通过",paraId:116,tocIndex:72},{value:"模板",paraId:119,tocIndex:72},{value:"自动生成",paraId:116,tocIndex:72},{value:"string",paraId:116,tocIndex:72},{value:"min",paraId:116,tocIndex:72},{value:"必须设置 ",paraId:116,tocIndex:72},{value:"type",paraId:116,tocIndex:72},{value:"：string 类型为字符串最小长度；number 类型时为最小值；array 类型时为数组最小长度",paraId:116,tocIndex:72},{value:"number",paraId:116,tocIndex:72},{value:"pattern",paraId:116,tocIndex:72},{value:"正则表达式匹配",paraId:116,tocIndex:72},{value:"RegExp",paraId:116,tocIndex:72},{value:"required",paraId:116,tocIndex:72},{value:"是否为必选字段",paraId:116,tocIndex:72},{value:"boolean",paraId:116,tocIndex:72},{value:"transform",paraId:116,tocIndex:72},{value:"将字段值转换成目标值后进行校验",paraId:116,tocIndex:72},{value:"(value) => any",paraId:116,tocIndex:72},{value:"type",paraId:116,tocIndex:72},{value:"类型，常见有 ",paraId:116,tocIndex:72},{value:"string",paraId:116,tocIndex:72},{value:"、",paraId:116,tocIndex:72},{value:"number",paraId:116,tocIndex:72},{value:"、",paraId:116,tocIndex:72},{value:"boolean",paraId:116,tocIndex:72},{value:"、",paraId:116,tocIndex:72},{value:"url",paraId:116,tocIndex:72},{value:"、 ",paraId:116,tocIndex:72},{value:"email",paraId:116,tocIndex:72},{value:"。更多请参考",paraId:116,tocIndex:72},{value:"此处",paraId:116,tocIndex:72},{value:"string",paraId:116,tocIndex:72},{value:"validateTrigger",paraId:116,tocIndex:72},{value:"设置触发验证时机，必须是 Form.Item 的 ",paraId:116,tocIndex:72},{value:"validateTrigger",paraId:116,tocIndex:72},{value:" 的子集",paraId:116,tocIndex:72},{value:"string、 string[]",paraId:116,tocIndex:72},{value:"validator",paraId:116,tocIndex:72},{value:"自定义校验，接收 Promise 作为返回值。",paraId:116,tocIndex:72},{value:"示例",paraId:120,tocIndex:72},{value:"参考",paraId:116,tocIndex:72},{value:"(",paraId:116,tocIndex:72},{value:"rule",paraId:121,tocIndex:72},{value:", value) => Promise",paraId:116,tocIndex:72},{value:"warningOnly",paraId:116,tocIndex:72},{value:"仅警告，不阻塞表单提交",paraId:116,tocIndex:72},{value:"boolean",paraId:116,tocIndex:72},{value:"whitespace",paraId:116,tocIndex:72},{value:"如果字段仅包含空格则校验不通过，只在 ",paraId:116,tocIndex:72},{value:"type: 'string'",paraId:116,tocIndex:72},{value:" 时生效",paraId:116,tocIndex:72},{value:"boolean",paraId:116,tocIndex:72},{value:"名称",paraId:122,tocIndex:73},{value:"说明",paraId:122,tocIndex:73},{value:"类型",paraId:122,tocIndex:73},{value:"默认值",paraId:122,tocIndex:73},{value:"版本",paraId:122,tocIndex:73},{value:"form",paraId:122,tocIndex:73},{value:"指定 Form 实例",paraId:122,tocIndex:73},{value:"FormInstance",paraId:122,tocIndex:73},{value:"当前 context 中的 Form",paraId:122,tocIndex:73},{value:"preserve",paraId:122,tocIndex:73},{value:"是否监视没有对应的 ",paraId:122,tocIndex:73},{value:"Form.Item",paraId:122,tocIndex:73},{value:" 的字段",paraId:122,tocIndex:73},{value:"boolean",paraId:122,tocIndex:73},{value:"false",paraId:122,tocIndex:73},{value:"Form.Item 默认绑定值属性到 ",paraId:123,tocIndex:76},{value:"value",paraId:123,tocIndex:76},{value:" 上，而 Switch、Checkbox 等组件的值属性为 ",paraId:123,tocIndex:76},{value:"checked",paraId:123,tocIndex:76},{value:"。你可以通过 ",paraId:123,tocIndex:76},{value:"valuePropName",paraId:123,tocIndex:76},{value:" 来修改绑定的值属性。",paraId:123,tocIndex:76},{value:'<Form.Item name="fieldA" valuePropName="checked">\n  <Switch />\n</Form.Item>\n',paraId:124,tocIndex:76},{value:"当 ",paraId:125,tocIndex:77},{value:"name",paraId:125,tocIndex:77},{value:" 为数组时，会按照顺序填充路径。当存在数字且 form store 中没有该字段时会自动转变成数组。因而如果需要数组为 key 时请使用 string 如：",paraId:125,tocIndex:77},{value:"['1', 'name']",paraId:125,tocIndex:77},{value:"。",paraId:125,tocIndex:77},{value:"Warning: Instance created by ",paraId:126,tocIndex:78},{value:"useForm",paraId:126,tocIndex:78},{value:" is not connect to any Form element. Forget to pass ",paraId:126,tocIndex:78},{value:"form",paraId:126,tocIndex:78},{value:" prop?",paraId:126,tocIndex:78},{value:"这是因为你在调用 form 方法时，Modal 还未初始化导致 form 没有关联任何 Form 组件。你可以通过给 Modal 设置 ",paraId:127,tocIndex:78},{value:"forceRender",paraId:127,tocIndex:78},{value:" 将其预渲染。",paraId:127,tocIndex:78},{value:"defaultValue",paraId:128},{value:"当你为 Form.Item 设置 ",paraId:129,tocIndex:79},{value:"name",paraId:129,tocIndex:79},{value:" 属性后，子组件会转为受控模式。因而 ",paraId:129,tocIndex:79},{value:"defaultValue",paraId:129,tocIndex:79},{value:" 不会生效。你需要在 Form 上通过 ",paraId:129,tocIndex:79},{value:"initialValues",paraId:129,tocIndex:79},{value:" 设置默认值。",paraId:129,tocIndex:79},{value:"ref",paraId:128},{value:"ref",paraId:130,tocIndex:80},{value:" 仅在节点被加载时才会被赋值，请参考 React 官方文档：",paraId:130,tocIndex:80},{value:"https://reactjs.org/docs/refs-and-the-dom.html#accessing-refs",paraId:130,tocIndex:80},{value:"resetFields",paraId:128},{value:"resetFields",paraId:131,tocIndex:81},{value:" 会重置整个 Field，因而其子组件也会重新 mount 从而消除自定义组件可能存在的副作用（例如异步数据、状态等等）。",paraId:131,tocIndex:81},{value:"在大部分场景下，我们总是推荐优先使用 Form 的 ",paraId:132,tocIndex:82},{value:"initialValues",paraId:132,tocIndex:82},{value:"。只有存在动态字段时你才应该使用 Item 的 ",paraId:132,tocIndex:82},{value:"initialValue",paraId:132,tocIndex:82},{value:"。默认值遵循以下规则：",paraId:132,tocIndex:82},{value:"Form 的 ",paraId:133,tocIndex:82},{value:"initialValues",paraId:133,tocIndex:82},{value:" 拥有最高优先级",paraId:133,tocIndex:82},{value:"Field 的 ",paraId:133,tocIndex:82},{value:"initialValue",paraId:133,tocIndex:82},{value:" 次之 *. 多个同 ",paraId:133,tocIndex:82},{value:"name",paraId:133,tocIndex:82},{value:" Item 都设置 ",paraId:133,tocIndex:82},{value:"initialValue",paraId:133,tocIndex:82},{value:" 时，则 Item 的 ",paraId:133,tocIndex:82},{value:"initialValue",paraId:133,tocIndex:82},{value:" 不生效",paraId:133,tocIndex:82},{value:"getFieldsValue",paraId:128},{value:"getFieldsValue",paraId:134,tocIndex:83},{value:" 默认返回收集的字段数据，而在初次渲染时 Form.Item 节点尚未渲染，因而无法收集到数据。你可以通过 ",paraId:134,tocIndex:83},{value:"getFieldsValue(true)",paraId:134,tocIndex:83},{value:" 来获取所有字段数据。",paraId:134,tocIndex:83},{value:"setFieldsValue",paraId:128},{value:"undefined",paraId:128},{value:"在 React 中，",paraId:135,tocIndex:84},{value:"value",paraId:135,tocIndex:84},{value:" 从确定值改为 ",paraId:135,tocIndex:84},{value:"undefined",paraId:135,tocIndex:84},{value:" 表示从受控变为非受控，因而不会重置展示值（但是 Form 中的值确实已经改变）。你可以通过 HOC 改变这一逻辑：",paraId:135,tocIndex:84},{value:"const MyInput = ({\n  // 强制保持受控逻辑\n  value = '',\n  ...rest\n}) => <input value={value} {...rest} />;\n\n<Form.Item name=\"my\">\n  <MyInput />\n</Form.Item>;\n",paraId:136,tocIndex:84},{value:"rules",paraId:128},{value:"onFieldsChange",paraId:128},{value:"字段除了本身的值变化外，校验也是其状态之一。因而在触发字段变化会经历以下几个阶段：",paraId:137,tocIndex:85},{value:"Trigger value change",paraId:138,tocIndex:85},{value:"Rule validating",paraId:138,tocIndex:85},{value:"Rule validated",paraId:138,tocIndex:85},{value:"在触发过程中，调用 ",paraId:139,tocIndex:85},{value:"isFieldValidating",paraId:139,tocIndex:85},{value:" 会经历 ",paraId:139,tocIndex:85},{value:"false",paraId:139,tocIndex:85},{value:" > ",paraId:139,tocIndex:85},{value:"true",paraId:139,tocIndex:85},{value:" > ",paraId:139,tocIndex:85},{value:"false",paraId:139,tocIndex:85},{value:" 的变化过程。",paraId:139,tocIndex:85},{value:"label",paraId:128},{value:"Form.List 本身是 renderProps，内部样式非常自由。因而默认配置 ",paraId:140,tocIndex:86},{value:"label",paraId:140,tocIndex:86},{value:" 和 ",paraId:140,tocIndex:86},{value:"error",paraId:140,tocIndex:86},{value:" 节点很难与之配合。如果你需要 metis 样式的 ",paraId:140,tocIndex:86},{value:"label",paraId:140,tocIndex:86},{value:"，可以通过外部包裹 Form.Item 来实现。",paraId:140,tocIndex:86},{value:"dependencies",paraId:128},{value:"Form.List 下的字段需要包裹 Form.List 本身的 ",paraId:141,tocIndex:87},{value:"name",paraId:141,tocIndex:87},{value:"，比如：",paraId:141,tocIndex:87},{value:"<Form.List name=\"users\">\n  {(fields) =>\n    fields.map((field) => (\n      <React.Fragment key={field.key}>\n        <Form.Item name={[field.name, 'name']} {...someRest1} />\n        <Form.Item name={[field.name, 'age']} {...someRest1} />\n      </React.Fragment>\n    ))\n  }\n</Form.List>\n",paraId:142,tocIndex:87},{value:"依赖则是：",paraId:143,tocIndex:87},{value:"['users', 0, 'name']",paraId:143,tocIndex:87},{value:"normalize",paraId:128},{value:"React 中异步更新会导致受控组件交互行为异常。当用户交互触发 ",paraId:144,tocIndex:88},{value:"onChange",paraId:144,tocIndex:88},{value:" 后，通过异步改变值会导致组件 ",paraId:144,tocIndex:88},{value:"value",paraId:144,tocIndex:88},{value:" 不会立刻更新，使得组件呈现假死状态。如果你需要异步触发变更，请通过自定义组件实现内部异步状态。",paraId:144,tocIndex:88},{value:"scrollToFirstError",paraId:128},{value:"scrollToField",paraId:128},{value:"使用了自定义表单控件",paraId:145,tocIndex:89},{value:"滑动操作将优先使用表单控件元素所转发的 ref 元素。因此，在考虑自定义组件支持校验滚动时，请优先考虑将其转发给表单控件元素。",paraId:146,tocIndex:89},{value:"滚动依赖于表单控件元素上绑定的 ",paraId:147,tocIndex:89},{value:"id",paraId:147,tocIndex:89},{value:" 字段，如果自定义控件没有将 ",paraId:147,tocIndex:89},{value:"id",paraId:147,tocIndex:89},{value:" 赋到正确的元素上，这个功能将失效。",paraId:147,tocIndex:89},{value:"页面内有多个表单",paraId:148,tocIndex:89},{value:"页面内如果有多个表单，且存在表单项 ",paraId:149,tocIndex:89},{value:"name",paraId:149,tocIndex:89},{value:" 重复，表单滚动定位可能会查找到另一个表单的同名表单项上。需要给表单 ",paraId:149,tocIndex:89},{value:"Form",paraId:149,tocIndex:89},{value:" 组件设置不同的 ",paraId:149,tocIndex:89},{value:"name",paraId:149,tocIndex:89},{value:" 以区分。",paraId:149,tocIndex:89},{value:"ref",paraId:128},{value:"当自定义组件不支持 ",paraId:150,tocIndex:90},{value:"ref",paraId:150,tocIndex:90},{value:" 时，Form 无法获取子元素真实 DOM 节点，而通过包裹 Class Component 调用 ",paraId:150,tocIndex:90},{value:"findDOMNode",paraId:150,tocIndex:90},{value:" 会在 React Strict Mode 下触发警告。因而我们使用 id 来进行元素定位。",paraId:150,tocIndex:90},{value:"setFieldsValue",paraId:128},{value:"onFieldsChange",paraId:128},{value:"onValuesChange",paraId:128},{value:"是的，change 事件仅当用户交互才会触发。该设计是为了防止在 change 事件中调用 ",paraId:151,tocIndex:91},{value:"setFieldsValue",paraId:151,tocIndex:91},{value:" 导致的循环问题。如果仅仅需要组件内消费，可以通过 ",paraId:151,tocIndex:91},{value:"useWatch",paraId:151,tocIndex:91},{value:" 或者 ",paraId:151,tocIndex:91},{value:"Field.renderProps",paraId:151,tocIndex:91},{value:" 来实现。",paraId:151,tocIndex:91},{value:"Form.Item 在渲染时会注入 ",paraId:152,tocIndex:92},{value:"value",paraId:152,tocIndex:92},{value:" 与 ",paraId:152,tocIndex:92},{value:"onChange",paraId:152,tocIndex:92},{value:" 事件给子元素，当你的字段组件被包裹时属性将无法传递。所以以下代码是不会生效的：",paraId:152,tocIndex:92},{value:'<Form.Item name="input">\n  <div>\n    <h3>I am a wrapped Input</h3>\n    <Input />\n  </div>\n</Form.Item>\n',paraId:153,tocIndex:92},{value:"你可以通过 HOC 自定义组件形式来解决这个问题：",paraId:154,tocIndex:92},{value:'const MyInput = (props) => (\n  <div>\n    <h3>I am a wrapped Input</h3>\n    <Input {...props} />\n  </div>\n);\n\n<Form.Item name="input">\n  <MyInput />\n</Form.Item>;\n',paraId:155,tocIndex:92}]}}]);