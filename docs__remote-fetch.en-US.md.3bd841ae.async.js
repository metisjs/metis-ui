"use strict";(self.webpackChunkmetis_ui=self.webpackChunkmetis_ui||[]).push([[6806],{76054:function(e,a,t){t.r(a);t(37496),t(82857),t(91238),t(83120),t(48415),t(95300),t(11024),t(65110),t(10006),t(18637),t(741),t(30166);var n=t(91512),s=t(35055),r=t(30158),l=t(39546),o=t(1873),i=t(74132);a.default=function(){return(0,i.jsx)(s.DumiPage,{children:(0,i.jsx)(l.Suspense,{fallback:(0,i.jsx)(r.Z,{}),children:(0,i.jsx)(i.Fragment,{children:(0,i.jsxs)("div",{className:"markdown",children:[(0,i.jsxs)("p",{children:[o.texts[0].value,(0,i.jsx)("code",{children:o.texts[1].value}),o.texts[2].value,(0,i.jsx)(s.Link,{to:"/components/auto-complete#auto-complete-demo-request",children:(0,i.jsx)("code",{children:o.texts[3].value})}),o.texts[4].value,(0,i.jsx)(s.Link,{to:"/components/cascader#cascader-demo-request",children:(0,i.jsx)("code",{children:o.texts[5].value})}),o.texts[6].value,(0,i.jsx)(s.Link,{to:"/components/list#list-demo-remote-load",children:(0,i.jsx)("code",{children:o.texts[7].value})}),o.texts[8].value,(0,i.jsx)(s.Link,{to:"/components/select#src-components-select-demo-request",children:(0,i.jsx)("code",{children:o.texts[9].value})}),o.texts[10].value,(0,i.jsx)(s.Link,{to:"/components/table#src-components-table-demo-request",children:(0,i.jsx)("code",{children:o.texts[11].value})}),o.texts[12].value,(0,i.jsx)(s.Link,{to:"/components/tree#src-components-tree-demo-remote",children:(0,i.jsx)("code",{children:o.texts[13].value})}),o.texts[14].value,(0,i.jsx)("code",{children:o.texts[15].value}),o.texts[16].value,(0,i.jsx)("code",{children:o.texts[17].value}),o.texts[18].value]}),(0,i.jsxs)("p",{children:[o.texts[19].value,(0,i.jsx)("code",{children:o.texts[20].value}),o.texts[21].value,(0,i.jsx)("a",{href:"https://ahooks.js.org/hooks/use-request/index",children:(0,i.jsx)("code",{children:o.texts[22].value})}),o.texts[23].value,(0,i.jsx)("code",{children:o.texts[24].value}),o.texts[25].value,(0,i.jsx)("code",{children:o.texts[26].value}),o.texts[27].value]}),(0,i.jsx)("p",{children:o.texts[28].value}),(0,i.jsx)(n.Z,{lang:"tsx",children:o.texts[29].value}),(0,i.jsx)("p",{children:o.texts[30].value}),(0,i.jsx)(n.Z,{lang:"tsx",children:o.texts[31].value}),(0,i.jsxs)("h2",{id:"basic-usage",children:[(0,i.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#basic-usage",children:(0,i.jsx)("span",{className:"icon icon-link"})}),"Basic Usage"]}),(0,i.jsx)(n.Z,{lang:"tsx",children:o.texts[32].value}),(0,i.jsxs)("h2",{id:"lazy-loading-or-pagination--search-filtering",children:[(0,i.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#lazy-loading-or-pagination--search-filtering",children:(0,i.jsx)("span",{className:"icon icon-link"})}),"Lazy Loading or Pagination + Search Filtering"]}),(0,i.jsx)("p",{children:o.texts[33].value}),(0,i.jsx)(n.Z,{lang:"tsx",children:o.texts[34].value}),(0,i.jsx)("blockquote",{children:(0,i.jsx)("p",{children:o.texts[35].value})})]})})})})}},1873:function(e,a,t){t.r(a),t.d(a,{texts:function(){return n}});const n=[{value:"In ",paraId:0},{value:"metisui",paraId:0},{value:", data display components such as ",paraId:0},{value:"AutoComplete",paraId:1},{value:", ",paraId:0},{value:"Cascader",paraId:2},{value:", ",paraId:0},{value:"List",paraId:3},{value:", ",paraId:0},{value:"Select",paraId:4},{value:", ",paraId:0},{value:"Table",paraId:5},{value:", and ",paraId:0},{value:"Tree",paraId:6},{value:" all support automatic remote data loading via the ",paraId:0},{value:"request",paraId:0},{value:" property. The ",paraId:0},{value:"request",paraId:0},{value:" property automatically manages loading states and, when the component supports pagination or lazy loading, handles data concatenation and pagination logic internally, simplifying business development.",paraId:0},{value:"The internal implementation of ",paraId:7},{value:"request",paraId:7},{value:" is based on ",paraId:7},{value:"ahook/useRequest",paraId:7},{value:", supporting all properties except ",paraId:7},{value:"manual",paraId:7},{value:" and ",paraId:7},{value:"refreshDepsAction",paraId:7},{value:".",paraId:7},{value:"The expected API response type is:",paraId:8},{value:"type ResponseData<TData extends Record<string, []>> = {\n  data: TData[]; // dataset\n  total?: number; // required only for pagination or lazy loading\n};\n",paraId:9},{value:"If your backend response type differs, you can define an adapter at the request layer to convert it.",paraId:10},{value:"/**\n *  Suppose the response type is:\n *  {\n *    success: true,\n *    data: {\n *      list: [...],\n *      total: 100\n *    }\n *  }\n */\nconst request = axios.create({\n  baseURL: import.meta.env.VITE_API_PREFIX,\n  timeout: 10000,\n});\n\nrequest.interceptors.response.use((response) => {\n  const { data: responseData } = response;\n  const { success, data } = responseData;\n\n  // Check for paginated API, adjust as needed\n  if (Array.isArray(data?.list) && 'total' in data) {\n    return {\n      ...responseData,\n      data: data.list,\n      total: data.total,\n    };\n  }\n\n  return responseData;\n});\n",paraId:11},{value:"const fetchUsers = () => {...};\n\n<Select options={[...]} request={fetchUsers}/>\n\n// OR\n\n<Select options={[...]} request={{\n  service: fetchUsers,\n  options: {\n    ... // useRequest options\n  }\n}}/>\n",paraId:12,tocIndex:0},{value:"When lazy loading or pagination is enabled, pagination info will be passed as the first argument to the request function.",paraId:13,tocIndex:1},{value:"const fetchUsers = ({\n  current: number,\n  pageSize: number,\n  filters: { [key: string]: string },\n}, /* other parameters */) => {...};\n\n<Select options={[...]} request={fetchUsers} lazyLoad/>\n\n// OR\n\n<Select options={[...]} request={{\n  service: fetchUsers,\n  options: {\n    ... // useRequest options\n  }\n}}\nlazyLoad\n/>\n",paraId:14,tocIndex:1},{value:"Translate by ChartGPT",paraId:15,tocIndex:1}]}}]);