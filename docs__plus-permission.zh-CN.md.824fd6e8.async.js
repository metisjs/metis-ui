"use strict";(self.webpackChunkmetis_ui=self.webpackChunkmetis_ui||[]).push([[1695],{13574:function(e,n,s){s.r(n);s(37496),s(82857),s(91238),s(83120),s(48415),s(95300),s(11024),s(65110),s(10006),s(18637),s(741),s(30166);var a=s(91512),t=s(35055),r=s(30158),i=s(39546),c=s(61371),o=s(74132);n.default=function(){return(0,o.jsx)(t.DumiPage,{children:(0,o.jsx)(i.Suspense,{fallback:(0,o.jsx)(r.Z,{}),children:(0,o.jsx)(o.Fragment,{children:(0,o.jsxs)("div",{className:"markdown",children:[(0,o.jsx)("p",{children:c.texts[0].value}),(0,o.jsxs)("h2",{id:"系统架构",children:[(0,o.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#系统架构",children:(0,o.jsx)("span",{className:"icon icon-link"})}),"系统架构"]}),(0,o.jsxs)("p",{children:[c.texts[1].value,(0,o.jsx)("strong",{children:c.texts[2].value}),c.texts[3].value]}),(0,o.jsxs)("ul",{children:[(0,o.jsxs)("li",{children:[(0,o.jsx)("strong",{children:c.texts[4].value}),c.texts[5].value]}),(0,o.jsxs)("li",{children:[(0,o.jsx)("strong",{children:c.texts[6].value}),c.texts[7].value]}),(0,o.jsxs)("li",{children:[(0,o.jsx)("strong",{children:c.texts[8].value}),c.texts[9].value]}),(0,o.jsxs)("li",{children:[(0,o.jsx)("strong",{children:c.texts[10].value}),c.texts[11].value]})]}),(0,o.jsxs)("h2",{id:"权限数据结构",children:[(0,o.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#权限数据结构",children:(0,o.jsx)("span",{className:"icon icon-link"})}),"权限数据结构"]}),(0,o.jsxs)("h3",{id:"用户权限格式",children:[(0,o.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#用户权限格式",children:(0,o.jsx)("span",{className:"icon icon-link"})}),"用户权限格式"]}),(0,o.jsx)(a.Z,{lang:"typescript",children:c.texts[12].value}),(0,o.jsxs)("h3",{id:"权限检查格式",children:[(0,o.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#权限检查格式",children:(0,o.jsx)("span",{className:"icon icon-link"})}),"权限检查格式"]}),(0,o.jsx)(a.Z,{lang:"typescript",children:c.texts[13].value}),(0,o.jsxs)("h2",{id:"权限配置",children:[(0,o.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#权限配置",children:(0,o.jsx)("span",{className:"icon icon-link"})}),"权限配置"]}),(0,o.jsxs)("h3",{id:"1-用户权限配置",children:[(0,o.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#1-用户权限配置",children:(0,o.jsx)("span",{className:"icon icon-link"})}),"1. 用户权限配置"]}),(0,o.jsx)("p",{children:c.texts[14].value}),(0,o.jsxs)("p",{children:[c.texts[15].value,(0,o.jsx)("code",{children:c.texts[16].value}),c.texts[17].value]}),(0,o.jsx)(a.Z,{title:"src/mocks/handlers/user.ts",lang:"ts",children:c.texts[18].value}),(0,o.jsxs)("h3",{id:"2-路由权限配置",children:[(0,o.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#2-路由权限配置",children:(0,o.jsx)("span",{className:"icon icon-link"})}),"2. 路由权限配置"]}),(0,o.jsxs)("p",{children:[c.texts[19].value,(0,o.jsx)("code",{children:c.texts[20].value}),c.texts[21].value]}),(0,o.jsx)(a.Z,{title:"src/routes.tsx",lang:"tsx",children:c.texts[22].value}),(0,o.jsxs)("h2",{id:"权限组件",children:[(0,o.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#权限组件",children:(0,o.jsx)("span",{className:"icon icon-link"})}),"权限组件"]}),(0,o.jsxs)("h3",{id:"access-权限控制组件",children:[(0,o.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#access-权限控制组件",children:(0,o.jsx)("span",{className:"icon icon-link"})}),"Access 权限控制组件"]}),(0,o.jsx)("p",{children:c.texts[23].value}),(0,o.jsx)(a.Z,{lang:"tsx",children:c.texts[24].value}),(0,o.jsxs)("h2",{id:"菜单权限过滤",children:[(0,o.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#菜单权限过滤",children:(0,o.jsx)("span",{className:"icon icon-link"})}),"菜单权限过滤"]}),(0,o.jsxs)("p",{children:[c.texts[25].value,(0,o.jsx)("code",{children:c.texts[26].value}),c.texts[27].value]}),(0,o.jsx)(a.Z,{title:"src/utils/menu.ts",lang:"ts",children:c.texts[28].value}),(0,o.jsxs)("h2",{id:"路由守卫",children:[(0,o.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#路由守卫",children:(0,o.jsx)("span",{className:"icon icon-link"})}),"路由守卫"]}),(0,o.jsxs)("p",{children:[c.texts[29].value,(0,o.jsx)("code",{children:c.texts[30].value}),c.texts[31].value,(0,o.jsx)("code",{children:c.texts[32].value}),c.texts[33].value]}),(0,o.jsx)(a.Z,{lang:"typescript",children:c.texts[34].value}),(0,o.jsx)("p",{children:c.texts[35].value})]})})})})}},61371:function(e,n,s){s.r(n),s.d(n,{texts:function(){return a}});const a=[{value:"权限控制是中后台场景非常常见的基础功能，Metis Plus 提供了完整的权限管理解决方案，包括用户认证、权限校验、菜单过滤、路由守卫等功能。",paraId:0},{value:"Metis Plus 的权限系统基于 ",paraId:1,tocIndex:0},{value:"RBAC（基于角色的访问控制）",paraId:1,tocIndex:0},{value:" 模型设计，主要包含以下几个核心概念：",paraId:1,tocIndex:0},{value:"用户（User）",paraId:2,tocIndex:0},{value:"：系统的使用者",paraId:2,tocIndex:0},{value:"权限（Permission）",paraId:2,tocIndex:0},{value:"：具体的操作权限，由资源和动作组成",paraId:2,tocIndex:0},{value:"资源（Resource）",paraId:2,tocIndex:0},{value:"：系统中的功能模块或数据实体",paraId:2,tocIndex:0},{value:"动作（Action）",paraId:2,tocIndex:0},{value:"：对资源的具体操作，如读取、编辑、删除等",paraId:2,tocIndex:0},{value:"export type UserPermissions = {\n  resource: string; // 资源名称\n  actions?: string[]; // 允许的操作列表\n}[];\n\n// 示例\nconst userPermissions: UserPermissions = [\n  { resource: 'dashboard', actions: ['view'] },\n  { resource: 'admin', actions: ['read', 'edit', 'delete'] },\n  { resource: 'workplace' }, // 无 actions 表示拥有该资源的所有权限\n];\n",paraId:3,tocIndex:2},{value:"export type Permission =\n  | Auth // 单个权限\n  | Permission[] // 权限数组（且关系）\n  | { and: Permission[] } // 明确的且关系\n  | { or: Permission[] }; // 或关系\n\nexport type Auth = { resource: Resource; actions?: string[] } | Resource; // 可以直接使用字符串或正则\n\ntype Resource = string | RegExp;\n",paraId:4,tocIndex:3},{value:"实际项目中用户权限由服务端返回，这里我们使用 mock 数据代替。",paraId:5,tocIndex:5},{value:"在 ",paraId:6,tocIndex:5},{value:"src/mocks/handlers/user.ts",paraId:6,tocIndex:5},{value:" 中配置不同用户的权限：",paraId:6,tocIndex:5},{value:"http.get('/api/currentUser', async ({ request }) => {\n  const token = request.headers.get('authorization') || '';\n\n  let permissions: UserPermissions = [];\n  if (token === 'fake_token_admin') {\n    permissions = [\n      { resource: 'admin', actions: ['read', 'edit', 'delete'] },\n      { resource: 'dashboard', actions: ['view'] },\n      { resource: 'workplace' },\n    ];\n  } else if (token === 'fake_token_user') {\n    permissions = [{ resource: 'dashboard', actions: ['view'] }, { resource: 'workplace' }];\n  }\n\n  return HttpResponse.json({\n    success: true,\n    data: { permissions /* 其他用户信息 */ },\n  });\n});\n",paraId:7,tocIndex:5},{value:"在 ",paraId:8,tocIndex:6},{value:"src/routes.tsx",paraId:8,tocIndex:6},{value:" 中为路由配置权限：",paraId:8,tocIndex:6},{value:"const routes: Route[] = [\n  {\n    name: 'menu.workplace',\n    icon: <Squares2X2Outline />,\n    path: 'workplace',\n    component: () => import('@/pages/workplace'),\n  },\n  {\n    name: 'menu.admin',\n    icon: <Cog6ToothOutline />,\n    path: 'admin',\n    component: () => import('@/pages/admin'),\n    permission: { resource: 'admin', actions: ['read'] }, // 需要管理员读取权限\n  },\n];\n",paraId:9,tocIndex:6},{value:"用于在组件中进行权限控制：",paraId:10,tocIndex:8},{value:"import Access from '@/components/Access';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      {/* 基本使用 */}\n      <Access permission={{ resource: 'admin' }}>\n        <Button>管理员专用按钮</Button>\n      </Access>\n\n      {/* 带 fallback */}\n      <Access\n        permission={{ resource: 'admin', actions: ['edit'] }}\n        fallback={<span>权限不足</span>}\n      >\n        <Button>编辑</Button>\n      </Access>\n\n      {/* 复杂权限 */}\n      <Access\n        permission={{\n          or: [{ resource: 'admin' }, { resource: 'editor', actions: ['publish'] }],\n        }}\n      >\n        <Button>发布文章</Button>\n      </Access>\n    </div>\n  );\n};\n",paraId:11,tocIndex:8},{value:"菜单系统会自动根据用户权限过滤不可访问的菜单项。权限过滤逻辑在 ",paraId:12,tocIndex:9},{value:"src/utils/menu.ts",paraId:12,tocIndex:9},{value:" 中实现：",paraId:12,tocIndex:9},{value:"export function formatter(\n  { data, t, userPerms }: FormatterProps,\n  parentPath = '/',\n  ignoreFilter = false,\n): MenuDataItem[] {\n  return data\n    .filter((item) => {\n      // 隐藏菜单过滤\n      if (!ignoreFilter && item.hideInMenu) return false;\n      // 权限过滤\n      if (item.permission && !hasPermission(item.permission, userPerms)) return false;\n      return true;\n    })\n    .flatMap((item) => {\n      // 菜单项处理逻辑\n    });\n}\n",paraId:13,tocIndex:9},{value:"路由级别的权限控制通过 ",paraId:14,tocIndex:10},{value:"Access",paraId:14,tocIndex:10},{value:" 组件实现，在 ",paraId:14,tocIndex:10},{value:"src/routes.tsx",paraId:14,tocIndex:10},{value:" 中自动包装：",paraId:14,tocIndex:10},{value:"// src/routes.tsx\nfunction generateRouteObjects(routes: Route[]): RouteObject[] {\n  return routes.map((route) => {\n    const { component, children, permission, ...rest } = route;\n\n    const routeObj: RouteObject = { ...rest };\n\n    if (component) {\n      const Component = lazy(component);\n      routeObj.element = (\n        <Suspense fallback={<Loading />}>\n          <Component />\n        </Suspense>\n      );\n\n      // 自动添加权限守卫\n      if (permission) {\n        routeObj.element = (\n          <Access permission={permission} fallback={<Err403 />}>\n            {routeObj.element}\n          </Access>\n        );\n      }\n    }\n\n    if (Array.isArray(children) && children.length > 0) {\n      routeObj.children = generateRouteObjects(children);\n    }\n\n    return routeObj;\n  });\n}\n",paraId:15,tocIndex:10},{value:"通过以上权限控制系统，Metis Plus 为中后台应用提供了完整、灵活、易用的权限管理解决方案，帮助开发者快速构建安全可靠的企业级应用。",paraId:16,tocIndex:10}]}}]);