"use strict";(self.webpackChunkmetis_ui=self.webpackChunkmetis_ui||[]).push([[9897],{86430:function(e,a,t){t.r(a);t(37496),t(82857),t(91238),t(83120),t(48415),t(95300),t(11024),t(65110),t(10006),t(18637),t(741),t(30166);var s=t(91512),n=t(35055),r=t(30158),l=t(39546),c=t(75731),d=t(74132);a.default=function(){return(0,d.jsx)(n.DumiPage,{children:(0,d.jsx)(l.Suspense,{fallback:(0,d.jsx)(r.Z,{}),children:(0,d.jsx)(d.Fragment,{children:(0,d.jsxs)("div",{className:"markdown",children:[(0,d.jsxs)("p",{children:[c.texts[0].value,(0,d.jsx)("code",{children:c.texts[1].value}),c.texts[2].value,(0,d.jsx)(n.Link,{to:"/components/auto-complete-cn#auto-complete-demo-request",children:(0,d.jsx)("code",{children:c.texts[3].value})}),c.texts[4].value,(0,d.jsx)(n.Link,{to:"/components/cascader-cn#cascader-demo-request",children:(0,d.jsx)("code",{children:c.texts[5].value})}),c.texts[6].value,(0,d.jsx)(n.Link,{to:"/components/list-cn#list-demo-remote-load",children:(0,d.jsx)("code",{children:c.texts[7].value})}),c.texts[8].value,(0,d.jsx)(n.Link,{to:"/components/select-cn#src-components-select-demo-request",children:(0,d.jsx)("code",{children:c.texts[9].value})}),c.texts[10].value,(0,d.jsx)(n.Link,{to:"/components/table-cn#src-components-table-demo-request",children:(0,d.jsx)("code",{children:c.texts[11].value})}),c.texts[12].value,(0,d.jsx)(n.Link,{to:"/components/tree-cn#src-components-tree-demo-remote",children:(0,d.jsx)("code",{children:c.texts[13].value})}),c.texts[14].value,(0,d.jsx)("code",{children:c.texts[15].value}),c.texts[16].value,(0,d.jsx)("code",{children:c.texts[17].value}),c.texts[18].value]}),(0,d.jsxs)("p",{children:[(0,d.jsx)("code",{children:c.texts[19].value}),c.texts[20].value,(0,d.jsx)("a",{href:"https://ahooks.js.org/zh-CN/hooks/use-request/index",children:(0,d.jsx)("code",{children:c.texts[21].value})}),c.texts[22].value,(0,d.jsx)("code",{children:c.texts[23].value}),c.texts[24].value,(0,d.jsx)("code",{children:c.texts[25].value}),c.texts[26].value]}),(0,d.jsx)("p",{children:c.texts[27].value}),(0,d.jsx)(s.Z,{lang:"tsx",children:c.texts[28].value}),(0,d.jsx)("p",{children:c.texts[29].value}),(0,d.jsx)(s.Z,{lang:"tsx",children:c.texts[30].value}),(0,d.jsxs)("h2",{id:"基础使用",children:[(0,d.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#基础使用",children:(0,d.jsx)("span",{className:"icon icon-link"})}),"基础使用"]}),(0,d.jsx)(s.Z,{lang:"tsx",children:c.texts[31].value}),(0,d.jsxs)("h2",{id:"懒加载或分页--搜索过滤",children:[(0,d.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#懒加载或分页--搜索过滤",children:(0,d.jsx)("span",{className:"icon icon-link"})}),"懒加载或分页 + 搜索过滤"]}),(0,d.jsx)("p",{children:c.texts[32].value}),(0,d.jsx)(s.Z,{lang:"tsx",children:c.texts[33].value})]})})})})}},75731:function(e,a,t){t.r(a),t.d(a,{texts:function(){return s}});const s=[{value:"在 ",paraId:0},{value:"metisui",paraId:0},{value:" 中，数据展示类组件如 ",paraId:0},{value:"AutoComplete",paraId:1},{value:"、",paraId:0},{value:"Cascader",paraId:2},{value:"、",paraId:0},{value:"List",paraId:3},{value:"、",paraId:0},{value:"Select",paraId:4},{value:"、",paraId:0},{value:"Table",paraId:5},{value:" 和 ",paraId:0},{value:"Tree",paraId:6},{value:" 均支持通过配置 ",paraId:0},{value:"request",paraId:0},{value:" 属性自动加载远程数据。",paraId:0},{value:"request",paraId:0},{value:" 会自动管理加载状态，并在组件支持分页或懒加载时，内部处理数据拼接和分页逻辑，从而简化业务开发流程。",paraId:0},{value:"request",paraId:7},{value:" 内部实现基于",paraId:7},{value:"ahook/useRequest",paraId:7},{value:", 支持除 ",paraId:7},{value:"manual",paraId:7},{value:" 和 ",paraId:7},{value:"refreshDepsAction",paraId:7},{value:" 之外的所有属性。",paraId:7},{value:"我们约定的准备的接口返回类型为：",paraId:8},{value:"type ResponseData<TData extends Record<string, []>> = {\n  data: TData[]; // 数据集\n  total?: number; // 只有在分页或懒加载时需要\n};\n",paraId:9},{value:"如果你的后端数据返回类型和我们的不一样，可以在请求层定义一个适配器来转换它。",paraId:10},{value:"/**\n *  假设返回类型为:\n *  {\n *    success: true,\n *    data: {\n *      list: [...],\n *      total: 100\n *    }\n *  }\n */\nconst request = axios.create({\n  baseURL: import.meta.env.VITE_API_PREFIX,\n  timeout: 10000,\n});\n\nrequest.interceptors.response.use((response) => {\n  const { data: responseData } = response;\n  const { success, data } = responseData;\n\n  // 判断分页接口，根据实际情况调整\n  if (Array.isArray(data?.list) && 'total' in data) {\n    return {\n      ...responseData,\n      data: data.list,\n      total: data.total,\n    };\n  }\n\n  return responseData;\n});\n",paraId:11},{value:"const fetchUsers = () => {...};\n\n<Select options={[...]} request={fetchUsers}/>\n\n// OR\n\n<Select options={[...]} request={{\n  service: fetchUsers\n  options:{\n    ... // useRequest options\n  }\n}}/>\n",paraId:12,tocIndex:0},{value:"当开启懒加载或分页时，分页信息将作为第一个参数传递给请求方法。",paraId:13,tocIndex:1},{value:"const fetchUsers = ({\n  current: number;\n  pageSize: number;\n  filters: { [key: string]: string };\n},/* 其他传入参数 */) => {...};\n\n<Select options={[...]} request={fetchUsers} lazyLoad/>\n\n// OR\n\n<Select options={[...]} request={{\n  service: fetchUsers\n  options:{\n    ... // useRequest options\n  }\n}}\nlazyLoad\n/>\n",paraId:14,tocIndex:1}]}}]);