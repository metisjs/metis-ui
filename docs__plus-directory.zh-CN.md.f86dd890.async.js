"use strict";(self.webpackChunkmetis_ui=self.webpackChunkmetis_ui||[]).push([[6749],{65109:function(e,a,s){s.r(a);s(37496),s(82857),s(91238),s(83120),s(48415),s(95300),s(11024),s(65110),s(10006),s(18637),s(741),s(30166);var l=s(91512),t=s(35055),n=s(30158),r=s(39546),i=s(45242),d=s(74132);a.default=function(){return(0,d.jsx)(t.DumiPage,{children:(0,d.jsx)(r.Suspense,{fallback:(0,d.jsx)(n.Z,{}),children:(0,d.jsx)(d.Fragment,{children:(0,d.jsxs)("div",{className:"markdown",children:[(0,d.jsxs)("p",{children:[i.texts[0].value,(0,d.jsx)("a",{href:"https://vitejs.dev/",children:i.texts[1].value}),i.texts[2].value]}),(0,d.jsx)("p",{children:i.texts[3].value}),(0,d.jsxs)("ul",{children:[(0,d.jsxs)("li",{children:[(0,d.jsx)("strong",{children:i.texts[4].value}),i.texts[5].value]}),(0,d.jsxs)("li",{children:[(0,d.jsx)("strong",{children:i.texts[6].value}),i.texts[7].value,(0,d.jsxs)("ul",{children:[(0,d.jsxs)("li",{children:[(0,d.jsx)("strong",{children:i.texts[8].value}),i.texts[9].value]}),(0,d.jsxs)("li",{children:[(0,d.jsx)("strong",{children:i.texts[10].value}),i.texts[11].value]}),(0,d.jsxs)("li",{children:[(0,d.jsx)("strong",{children:i.texts[12].value}),i.texts[13].value]}),(0,d.jsxs)("li",{children:[(0,d.jsx)("strong",{children:i.texts[14].value}),i.texts[15].value]}),(0,d.jsxs)("li",{children:[(0,d.jsx)("strong",{children:i.texts[16].value}),i.texts[17].value]}),(0,d.jsxs)("li",{children:[(0,d.jsx)("strong",{children:i.texts[18].value}),i.texts[19].value]}),(0,d.jsxs)("li",{children:[(0,d.jsx)("strong",{children:i.texts[20].value}),i.texts[21].value]}),(0,d.jsxs)("li",{children:[(0,d.jsx)("strong",{children:i.texts[22].value}),i.texts[23].value]}),(0,d.jsxs)("li",{children:[(0,d.jsx)("strong",{children:i.texts[24].value}),i.texts[25].value]}),(0,d.jsxs)("li",{children:[(0,d.jsx)("strong",{children:i.texts[26].value}),i.texts[27].value]}),(0,d.jsxs)("li",{children:[(0,d.jsx)("strong",{children:i.texts[28].value}),i.texts[29].value]}),(0,d.jsx)("li",{children:i.texts[30].value})]})]})]}),(0,d.jsx)("p",{children:i.texts[31].value}),(0,d.jsxs)("h2",{id:"目录",children:[(0,d.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#目录",children:(0,d.jsx)("span",{className:"icon icon-link"})}),"目录"]}),(0,d.jsx)(l.Z,{children:i.texts[32].value})]})})})})}},45242:function(e,a,s){s.r(a),s.d(a,{texts:function(){return l}});const l=[{value:"本项目基于 ",paraId:0},{value:"Vite",paraId:0},{value:" 作为前端构建工具，采用了现代化的开发流程和高效的模块热更新机制。我们对目录结构进行了详细的功能划分，遵循“约定优于配置”的原则，便于团队协作和项目维护。",paraId:0},{value:"各目录和文件的职责如下：",paraId:1},{value:"public",paraId:2},{value:"：存放无需构建即可直接访问的静态资源，如 favicon、全局图片等。",paraId:2},{value:"src",paraId:2},{value:"：核心源码目录，按照功能模块细分，提升可读性和可维护性。\n",paraId:2},{value:"apis",paraId:3},{value:"：统一管理所有后端接口请求，便于接口复用和维护。",paraId:3},{value:"assets",paraId:3},{value:"：集中存放图片、SVG 等静态资源，方便统一管理和引用。",paraId:3},{value:"components",paraId:3},{value:"：封装通用 UI 组件，实现高复用性和低耦合。",paraId:3},{value:"hooks",paraId:3},{value:"：自定义 React Hooks，抽离通用逻辑，提升代码复用率。",paraId:3},{value:"layouts",paraId:3},{value:"：页面布局相关组件，支持多种页面结构切换。",paraId:3},{value:"locale",paraId:3},{value:"：国际化资源文件，支持多语言切换。",paraId:3},{value:"mocks",paraId:3},{value:"：本地 mock 数据和服务，便于开发和测试。",paraId:3},{value:"pages",paraId:3},{value:"：页面级组件，按路由划分，结构清晰。",paraId:3},{value:"store",paraId:3},{value:"：基于 Zustand 的全局状态管理，简洁高效。",paraId:3},{value:"types",paraId:3},{value:"：TypeScript 类型定义，提升类型安全和开发体验。",paraId:3},{value:"utils",paraId:3},{value:"：通用工具函数和工具类，便于全局调用。",paraId:3},{value:"其他入口文件和配置文件，确保项目结构清晰、职责明确。",paraId:3},{value:"通过这样的目录约定，能够快速定位和管理项目中的各类资源和代码，降低维护成本，提升开发效率。适合中大型团队协作开发，也便于后续功能扩展和技术升级。",paraId:4},{value:"├── .husky                     # Husky 钩子配置目录\n├── public                     # 公共静态资源目录\n├── src                        # 源码目录\n│   ├── apis                   # 服务端接口请求相关\n│   ├── assets                 # 静态资源（图片、SVG等）\n│   ├── components             # 通用组件\n│   ├── hooks                  # 自定义 hooks\n│   ├── layouts                # 页面布局组件\n│   ├── locale                 # 国际化资源\n│   ├── mocks                  # Mock 数据与服务\n│   ├── pages                  # 页面组件\n│   ├── store                  # Zustand 状态管理\n│   ├── types                  # TypeScript 类型定义\n│   ├── utils                  # 工具函数与工具类\n│   ├── loading.tsx            # 全局 Loading 组件\n│   ├── main.tsx               # 应用入口文件\n│   ├── routes.tsx             # 路由和菜单配置\n│   └── vite-env.d.ts          # Vite 环境类型声明\n├── .env                       # 环境变量配置文件\n├── .lintstagedrc              # lint-staged 配置文件\n├── .prettierignore            # Prettier 忽略文件配置\n├── .prettierrc                # Prettier 代码格式化配置\n├── commitlint.config.js       # 提交规范校验配置\n├── eslint.config.js           # ESLint 代码规范配置\n├── index.html                 # 项目入口 HTML\n├── package.json               # 项目依赖与脚本配置\n├── tailwind.css               # TailwindCSS 全局样式入口\n├── tsconfig.app.json          # TS 应用配置\n├── tsconfig.json              # TS 根配置\n├── tsconfig.node.json         # TS Node 配\n",paraId:5,tocIndex:0}]}}]);