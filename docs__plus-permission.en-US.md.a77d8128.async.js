"use strict";(self.webpackChunkmetis_ui=self.webpackChunkmetis_ui||[]).push([[5552],{36750:function(e,n,s){s.r(n);s(37496),s(82857),s(91238),s(83120),s(48415),s(95300),s(11024),s(65110),s(10006),s(18637),s(741),s(30166);var i=s(91512),r=s(35055),t=s(30158),a=s(39546),o=s(80935),c=s(74132);n.default=function(){return(0,c.jsx)(r.DumiPage,{children:(0,c.jsx)(a.Suspense,{fallback:(0,c.jsx)(t.Z,{}),children:(0,c.jsx)(c.Fragment,{children:(0,c.jsxs)("div",{className:"markdown",children:[(0,c.jsx)("p",{children:o.texts[0].value}),(0,c.jsxs)("h2",{id:"system-architecture",children:[(0,c.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#system-architecture",children:(0,c.jsx)("span",{className:"icon icon-link"})}),"System Architecture"]}),(0,c.jsxs)("p",{children:[o.texts[1].value,(0,c.jsx)("strong",{children:o.texts[2].value}),o.texts[3].value]}),(0,c.jsxs)("ul",{children:[(0,c.jsxs)("li",{children:[(0,c.jsx)("strong",{children:o.texts[4].value}),o.texts[5].value]}),(0,c.jsxs)("li",{children:[(0,c.jsx)("strong",{children:o.texts[6].value}),o.texts[7].value]}),(0,c.jsxs)("li",{children:[(0,c.jsx)("strong",{children:o.texts[8].value}),o.texts[9].value]}),(0,c.jsxs)("li",{children:[(0,c.jsx)("strong",{children:o.texts[10].value}),o.texts[11].value]})]}),(0,c.jsxs)("h2",{id:"permission-data-structure",children:[(0,c.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#permission-data-structure",children:(0,c.jsx)("span",{className:"icon icon-link"})}),"Permission Data Structure"]}),(0,c.jsxs)("h3",{id:"user-permission-format",children:[(0,c.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#user-permission-format",children:(0,c.jsx)("span",{className:"icon icon-link"})}),"User Permission Format"]}),(0,c.jsx)(i.Z,{lang:"typescript",children:o.texts[12].value}),(0,c.jsxs)("h3",{id:"permission-check-format",children:[(0,c.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#permission-check-format",children:(0,c.jsx)("span",{className:"icon icon-link"})}),"Permission Check Format"]}),(0,c.jsx)(i.Z,{lang:"typescript",children:o.texts[13].value}),(0,c.jsxs)("h2",{id:"permission-configuration",children:[(0,c.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#permission-configuration",children:(0,c.jsx)("span",{className:"icon icon-link"})}),"Permission Configuration"]}),(0,c.jsxs)("h3",{id:"1-user-permission-configuration",children:[(0,c.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#1-user-permission-configuration",children:(0,c.jsx)("span",{className:"icon icon-link"})}),"1. User Permission Configuration"]}),(0,c.jsx)("p",{children:o.texts[14].value}),(0,c.jsxs)("p",{children:[o.texts[15].value,(0,c.jsx)("code",{children:o.texts[16].value}),o.texts[17].value]}),(0,c.jsx)(i.Z,{title:"src/mocks/handlers/user.ts",lang:"ts",children:o.texts[18].value}),(0,c.jsxs)("h3",{id:"2-route-permission-configuration",children:[(0,c.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#2-route-permission-configuration",children:(0,c.jsx)("span",{className:"icon icon-link"})}),"2. Route Permission Configuration"]}),(0,c.jsxs)("p",{children:[o.texts[19].value,(0,c.jsx)("code",{children:o.texts[20].value}),o.texts[21].value]}),(0,c.jsx)(i.Z,{title:"src/routes.tsx",lang:"tsx",children:o.texts[22].value}),(0,c.jsxs)("h2",{id:"permission-component",children:[(0,c.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#permission-component",children:(0,c.jsx)("span",{className:"icon icon-link"})}),"Permission Component"]}),(0,c.jsxs)("h3",{id:"access-permission-control-component",children:[(0,c.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#access-permission-control-component",children:(0,c.jsx)("span",{className:"icon icon-link"})}),"Access Permission Control Component"]}),(0,c.jsx)("p",{children:o.texts[23].value}),(0,c.jsx)(i.Z,{lang:"tsx",children:o.texts[24].value}),(0,c.jsxs)("h2",{id:"menu-permission-filtering",children:[(0,c.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#menu-permission-filtering",children:(0,c.jsx)("span",{className:"icon icon-link"})}),"Menu Permission Filtering"]}),(0,c.jsxs)("p",{children:[o.texts[25].value,(0,c.jsx)("code",{children:o.texts[26].value}),o.texts[27].value]}),(0,c.jsx)(i.Z,{title:"src/utils/menu.ts",lang:"ts",children:o.texts[28].value}),(0,c.jsxs)("h2",{id:"route-guards",children:[(0,c.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#route-guards",children:(0,c.jsx)("span",{className:"icon icon-link"})}),"Route Guards"]}),(0,c.jsxs)("p",{children:[o.texts[29].value,(0,c.jsx)("code",{children:o.texts[30].value}),o.texts[31].value,(0,c.jsx)("code",{children:o.texts[32].value}),o.texts[33].value]}),(0,c.jsx)(i.Z,{lang:"typescript",children:o.texts[34].value}),(0,c.jsx)("p",{children:o.texts[35].value}),(0,c.jsx)("blockquote",{children:(0,c.jsx)("p",{children:o.texts[36].value})})]})})})})}},80935:function(e,n,s){s.r(n),s.d(n,{texts:function(){return i}});const i=[{value:"Permission control is a fundamental feature commonly found in enterprise backend scenarios. Metis Plus provides a comprehensive permission management solution, including user authentication, permission validation, menu filtering, route guards, and more.",paraId:0},{value:"The Metis Plus permission system is designed based on the ",paraId:1,tocIndex:0},{value:"RBAC (Role-Based Access Control)",paraId:1,tocIndex:0},{value:" model, which includes the following core concepts:",paraId:1,tocIndex:0},{value:"User",paraId:2,tocIndex:0},{value:": The system user",paraId:2,tocIndex:0},{value:"Permission",paraId:2,tocIndex:0},{value:": Specific operation permissions, consisting of resources and actions",paraId:2,tocIndex:0},{value:"Resource",paraId:2,tocIndex:0},{value:": Functional modules or data entities in the system",paraId:2,tocIndex:0},{value:"Action",paraId:2,tocIndex:0},{value:": Specific operations on resources, such as read, edit, delete, etc.",paraId:2,tocIndex:0},{value:"export type UserPermissions = {\n  resource: string; // Resource name\n  actions?: string[]; // List of allowed actions\n}[];\n\n// Example\nconst userPermissions: UserPermissions = [\n  { resource: 'dashboard', actions: ['view'] },\n  { resource: 'admin', actions: ['read', 'edit', 'delete'] },\n  { resource: 'workplace' }, // No actions means all permissions for the resource\n];\n",paraId:3,tocIndex:2},{value:"export type Permission =\n  | Auth // Single permission\n  | Permission[] // Array of permissions (AND relationship)\n  | { and: Permission[] } // Explicit AND relationship\n  | { or: Permission[] }; // OR relationship\n\nexport type Auth = { resource: Resource; actions?: string[] } | Resource; // Can use string or RegExp\n\ntype Resource = string | RegExp;\n",paraId:4,tocIndex:3},{value:"In real projects, user permissions are returned by the backend. Here, we use mock data for demonstration.",paraId:5,tocIndex:5},{value:"Configure permissions for different users in ",paraId:6,tocIndex:5},{value:"src/mocks/handlers/user.ts",paraId:6,tocIndex:5},{value:":",paraId:6,tocIndex:5},{value:"http.get('/api/currentUser', async ({ request }) => {\n  const token = request.headers.get('authorization') || '';\n\n  let permissions: UserPermissions = [];\n  if (token === 'fake_token_admin') {\n    permissions = [\n      { resource: 'admin', actions: ['read', 'edit', 'delete'] },\n      { resource: 'dashboard', actions: ['view'] },\n      { resource: 'workplace' },\n    ];\n  } else if (token === 'fake_token_user') {\n    permissions = [{ resource: 'dashboard', actions: ['view'] }, { resource: 'workplace' }];\n  }\n\n  return HttpResponse.json({\n    success: true,\n    data: { permissions /* other user info */ },\n  });\n});\n",paraId:7,tocIndex:5},{value:"Configure route permissions in ",paraId:8,tocIndex:6},{value:"src/routes.tsx",paraId:8,tocIndex:6},{value:":",paraId:8,tocIndex:6},{value:"const routes: Route[] = [\n  {\n    name: 'menu.workplace',\n    icon: <Squares2X2Outline />,\n    path: 'workplace',\n    component: () => import('@/pages/workplace'),\n  },\n  {\n    name: 'menu.admin',\n    icon: <Cog6ToothOutline />,\n    path: 'admin',\n    component: () => import('@/pages/admin'),\n    permission: { resource: 'admin', actions: ['read'] }, // Requires admin read permission\n  },\n];\n",paraId:9,tocIndex:6},{value:"Used for permission control within components:",paraId:10,tocIndex:8},{value:"import Access from '@/components/Access';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      {/* Basic usage */}\n      <Access permission={{ resource: 'admin' }}>\n        <Button>Admin Only Button</Button>\n      </Access>\n\n      {/* With fallback */}\n      <Access\n        permission={{ resource: 'admin', actions: ['edit'] }}\n        fallback={<span>Insufficient Permission</span>}\n      >\n        <Button>Edit</Button>\n      </Access>\n\n      {/* Complex permission */}\n      <Access\n        permission={{\n          or: [{ resource: 'admin' }, { resource: 'editor', actions: ['publish'] }],\n        }}\n      >\n        <Button>Publish Article</Button>\n      </Access>\n    </div>\n  );\n};\n",paraId:11,tocIndex:8},{value:"The menu system automatically filters out inaccessible menu items based on user permissions. The filtering logic is implemented in ",paraId:12,tocIndex:9},{value:"src/utils/menu.ts",paraId:12,tocIndex:9},{value:":",paraId:12,tocIndex:9},{value:"export function formatter(\n  { data, t, userPerms }: FormatterProps,\n  parentPath = '/',\n  ignoreFilter = false,\n): MenuDataItem[] {\n  return data\n    .filter((item) => {\n      // Hide menu filtering\n      if (!ignoreFilter && item.hideInMenu) return false;\n      // Permission filtering\n      if (item.permission && !hasPermission(item.permission, userPerms)) return false;\n      return true;\n    })\n    .flatMap((item) => {\n      // Menu item processing logic\n    });\n}\n",paraId:13,tocIndex:9},{value:"Route-level permission control is implemented via the ",paraId:14,tocIndex:10},{value:"Access",paraId:14,tocIndex:10},{value:" component, which is automatically wrapped in ",paraId:14,tocIndex:10},{value:"src/routes.tsx",paraId:14,tocIndex:10},{value:":",paraId:14,tocIndex:10},{value:"// src/routes.tsx\nfunction generateRouteObjects(routes: Route[]): RouteObject[] {\n  return routes.map((route) => {\n    const { component, children, permission, ...rest } = route;\n\n    const routeObj: RouteObject = { ...rest };\n\n    if (component) {\n      const Component = lazy(component);\n      routeObj.element = (\n        <Suspense fallback={<Loading />}>\n          <Component />\n        </Suspense>\n      );\n\n      // Automatically add permission guard\n      if (permission) {\n        routeObj.element = (\n          <Access permission={permission} fallback={<Err403 />}>\n            {routeObj.element}\n          </Access>\n        );\n      }\n    }\n\n    if (Array.isArray(children) && children.length > 0) {\n      routeObj.children = generateRouteObjects(children);\n    }\n\n    return routeObj;\n  });\n}\n",paraId:15,tocIndex:10},{value:"With this permission control system, Metis Plus provides a complete, flexible, and easy-to-use permission management solution for enterprise backend applications, helping developers quickly build secure and reliable enterprise-grade apps.",paraId:16,tocIndex:10},{value:"Translate by ChartGPT",paraId:17,tocIndex:10}]}}]);