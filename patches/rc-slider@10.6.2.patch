diff --git a/es/Marks/Mark.d.ts b/es/Marks/Mark.d.ts
index 60f677541ad279caddd71d161bbe6d72c88a7f96..3000801d108395da7ced5f111c8f8afeff639c1f 100644
--- a/es/Marks/Mark.d.ts
+++ b/es/Marks/Mark.d.ts
@@ -3,6 +3,7 @@ export interface MarkProps {
     prefixCls: string;
     children?: React.ReactNode;
     style?: React.CSSProperties;
+    className?: string;
     value: number;
     onClick: (value: number) => void;
 }
diff --git a/es/Marks/Mark.js b/es/Marks/Mark.js
index e0f8f50be1e25d29f84345b0bf81a5839e074fc0..00f434d52a2caba51cc2bce80bf150bed88eaf6e 100644
--- a/es/Marks/Mark.js
+++ b/es/Marks/Mark.js
@@ -1,6 +1,6 @@
 import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
 import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
-import classNames from 'classnames';
+import cls from 'classnames';
 import * as React from 'react';
 import SliderContext from "../context";
 import { getDirectionStyle } from "../util";
@@ -9,6 +9,7 @@ var Mark = function Mark(props) {
     style = props.style,
     children = props.children,
     value = props.value,
+    className = props.className,
     _onClick = props.onClick;
   var _React$useContext = React.useContext(SliderContext),
     min = _React$useContext.min,
@@ -16,13 +17,14 @@ var Mark = function Mark(props) {
     direction = _React$useContext.direction,
     includedStart = _React$useContext.includedStart,
     includedEnd = _React$useContext.includedEnd,
-    included = _React$useContext.included;
+    included = _React$useContext.included,
+    classNames = _React$useContext.classNames;
   var textCls = "".concat(prefixCls, "-text");
 
   // ============================ Offset ============================
   var positionStyle = getDirectionStyle(direction, value, min, max);
   return /*#__PURE__*/React.createElement("span", {
-    className: classNames(textCls, _defineProperty({}, "".concat(textCls, "-active"), included && includedStart <= value && value <= includedEnd)),
+    className: cls(textCls, _defineProperty({}, "".concat(textCls, "-active"), included && includedStart <= value && value <= includedEnd), classNames.mark, className),
     style: _objectSpread(_objectSpread({}, positionStyle), style),
     onMouseDown: function onMouseDown(e) {
       e.stopPropagation();
diff --git a/es/Marks/index.d.ts b/es/Marks/index.d.ts
index 5db9b7d0c3295a4b277294b5f1297c835f136fca..ca55fe5d7047ee56d5e18d41e782ecbfb4ecd9aa 100644
--- a/es/Marks/index.d.ts
+++ b/es/Marks/index.d.ts
@@ -1,5 +1,6 @@
 import * as React from 'react';
 export interface MarkObj {
+    className?: string;
     style?: React.CSSProperties;
     label?: React.ReactNode;
 }
diff --git a/es/Marks/index.js b/es/Marks/index.js
index b40cae73876e366384d94d27f6fafb7214955f11..f7d7f8f7d59e8607b7612754e2ffff6f4a71b5d0 100644
--- a/es/Marks/index.js
+++ b/es/Marks/index.js
@@ -1,9 +1,13 @@
 import * as React from 'react';
 import Mark from "./Mark";
+import SliderContext from "../context";
+import cls from 'classnames';
 var Marks = function Marks(props) {
   var prefixCls = props.prefixCls,
     marks = props.marks,
     onClick = props.onClick;
+  var _React$useContext = React.useContext(SliderContext),
+    classNames = _React$useContext.classNames;
   var markPrefixCls = "".concat(prefixCls, "-mark");
 
   // Not render mark if empty
@@ -11,15 +15,17 @@ var Marks = function Marks(props) {
     return null;
   }
   return /*#__PURE__*/React.createElement("div", {
-    className: markPrefixCls
+    className: cls(markPrefixCls, classNames.marks)
   }, marks.map(function (_ref) {
     var value = _ref.value,
       style = _ref.style,
-      label = _ref.label;
+      label = _ref.label,
+      className = _ref.className;
     return /*#__PURE__*/React.createElement(Mark, {
       key: value,
       prefixCls: markPrefixCls,
       style: style,
+      className: className,
       value: value,
       onClick: onClick
     }, label);
diff --git a/es/interface.d.ts b/es/interface.d.ts
index a662c8c97ed9014afa5156e4684aea4649a90b81..d5a12ee4bd2dbf9b9232474b628952365a7eb784 100644
--- a/es/interface.d.ts
+++ b/es/interface.d.ts
@@ -2,6 +2,6 @@ import type React from 'react';
 export type Direction = 'rtl' | 'ltr' | 'ttb' | 'btt';
 export type OnStartMove = (e: React.MouseEvent | React.TouchEvent, valueIndex: number, startValues?: number[]) => void;
 export type AriaValueFormat = (value: number) => string;
-export type SemanticName = 'tracks' | 'track' | 'rail' | 'handle';
+export type SemanticName = 'tracks' | 'track' | 'rail' | 'handle' | 'marks' | 'mark';
 export type SliderClassNames = Partial<Record<SemanticName, string>>;
 export type SliderStyles = Partial<Record<SemanticName, React.CSSProperties>>;
diff --git a/lib/Marks/Mark.d.ts b/lib/Marks/Mark.d.ts
index 60f677541ad279caddd71d161bbe6d72c88a7f96..3000801d108395da7ced5f111c8f8afeff639c1f 100644
--- a/lib/Marks/Mark.d.ts
+++ b/lib/Marks/Mark.d.ts
@@ -3,6 +3,7 @@ export interface MarkProps {
     prefixCls: string;
     children?: React.ReactNode;
     style?: React.CSSProperties;
+    className?: string;
     value: number;
     onClick: (value: number) => void;
 }
diff --git a/lib/Marks/Mark.js b/lib/Marks/Mark.js
index 1c454285d5d2a2ed97080d36f15c8ea4fcb3ff8b..0d3684e98db39ff5708012f91ccf59a6085dd3c1 100644
--- a/lib/Marks/Mark.js
+++ b/lib/Marks/Mark.js
@@ -19,6 +19,7 @@ var Mark = function Mark(props) {
     style = props.style,
     children = props.children,
     value = props.value,
+    className = props.className,
     _onClick = props.onClick;
   var _React$useContext = React.useContext(_context.default),
     min = _React$useContext.min,
@@ -26,13 +27,14 @@ var Mark = function Mark(props) {
     direction = _React$useContext.direction,
     includedStart = _React$useContext.includedStart,
     includedEnd = _React$useContext.includedEnd,
-    included = _React$useContext.included;
+    included = _React$useContext.included,
+    classNames = _React$useContext.classNames;
   var textCls = "".concat(prefixCls, "-text");
 
   // ============================ Offset ============================
   var positionStyle = (0, _util.getDirectionStyle)(direction, value, min, max);
   return /*#__PURE__*/React.createElement("span", {
-    className: (0, _classnames.default)(textCls, (0, _defineProperty2.default)({}, "".concat(textCls, "-active"), included && includedStart <= value && value <= includedEnd)),
+    className: (0, _classnames.default)(textCls, (0, _defineProperty2.default)({}, "".concat(textCls, "-active"), included && includedStart <= value && value <= includedEnd), classNames.mark, className),
     style: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, positionStyle), style),
     onMouseDown: function onMouseDown(e) {
       e.stopPropagation();
diff --git a/lib/Marks/index.d.ts b/lib/Marks/index.d.ts
index 5db9b7d0c3295a4b277294b5f1297c835f136fca..ca55fe5d7047ee56d5e18d41e782ecbfb4ecd9aa 100644
--- a/lib/Marks/index.d.ts
+++ b/lib/Marks/index.d.ts
@@ -1,5 +1,6 @@
 import * as React from 'react';
 export interface MarkObj {
+    className?: string;
     style?: React.CSSProperties;
     label?: React.ReactNode;
 }
diff --git a/lib/Marks/index.js b/lib/Marks/index.js
index 5754e5ce350df09f6506d65ae37363e886d47b20..c701248e4a8316b391f16eecb152f0c2833fbfde 100644
--- a/lib/Marks/index.js
+++ b/lib/Marks/index.js
@@ -8,12 +8,16 @@ Object.defineProperty(exports, "__esModule", {
 exports.default = void 0;
 var React = _interopRequireWildcard(require("react"));
 var _Mark = _interopRequireDefault(require("./Mark"));
+var _context = _interopRequireDefault(require("../context"));
+var _classnames = _interopRequireDefault(require("classnames"));
 function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
 function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
 var Marks = function Marks(props) {
   var prefixCls = props.prefixCls,
     marks = props.marks,
     onClick = props.onClick;
+  var _React$useContext = React.useContext(_context.default),
+    classNames = _React$useContext.classNames;
   var markPrefixCls = "".concat(prefixCls, "-mark");
 
   // Not render mark if empty
@@ -21,15 +25,17 @@ var Marks = function Marks(props) {
     return null;
   }
   return /*#__PURE__*/React.createElement("div", {
-    className: markPrefixCls
+    className: (0, _classnames.default)(markPrefixCls, classNames.marks)
   }, marks.map(function (_ref) {
     var value = _ref.value,
       style = _ref.style,
-      label = _ref.label;
+      label = _ref.label,
+      className = _ref.className;
     return /*#__PURE__*/React.createElement(_Mark.default, {
       key: value,
       prefixCls: markPrefixCls,
       style: style,
+      className: className,
       value: value,
       onClick: onClick
     }, label);
diff --git a/lib/interface.d.ts b/lib/interface.d.ts
index a662c8c97ed9014afa5156e4684aea4649a90b81..d5a12ee4bd2dbf9b9232474b628952365a7eb784 100644
--- a/lib/interface.d.ts
+++ b/lib/interface.d.ts
@@ -2,6 +2,6 @@ import type React from 'react';
 export type Direction = 'rtl' | 'ltr' | 'ttb' | 'btt';
 export type OnStartMove = (e: React.MouseEvent | React.TouchEvent, valueIndex: number, startValues?: number[]) => void;
 export type AriaValueFormat = (value: number) => string;
-export type SemanticName = 'tracks' | 'track' | 'rail' | 'handle';
+export type SemanticName = 'tracks' | 'track' | 'rail' | 'handle' | 'marks' | 'mark';
 export type SliderClassNames = Partial<Record<SemanticName, string>>;
 export type SliderStyles = Partial<Record<SemanticName, React.CSSProperties>>;
