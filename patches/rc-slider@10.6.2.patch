diff --git a/es/Marks/Mark.d.ts b/es/Marks/Mark.d.ts
index 60f677541ad279caddd71d161bbe6d72c88a7f96..3000801d108395da7ced5f111c8f8afeff639c1f 100644
--- a/es/Marks/Mark.d.ts
+++ b/es/Marks/Mark.d.ts
@@ -3,6 +3,7 @@ export interface MarkProps {
     prefixCls: string;
     children?: React.ReactNode;
     style?: React.CSSProperties;
+    className?: string;
     value: number;
     onClick: (value: number) => void;
 }
diff --git a/es/Marks/Mark.js b/es/Marks/Mark.js
index e0f8f50be1e25d29f84345b0bf81a5839e074fc0..4ef98552a91ad6ab5d745cd0760f67e87c9892b0 100644
--- a/es/Marks/Mark.js
+++ b/es/Marks/Mark.js
@@ -1,7 +1,8 @@
 import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
 import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
-import classNames from 'classnames';
+import cls from 'classnames';
 import * as React from 'react';
+import { twMerge } from 'tailwind-merge';
 import SliderContext from "../context";
 import { getDirectionStyle } from "../util";
 var Mark = function Mark(props) {
@@ -9,6 +10,7 @@ var Mark = function Mark(props) {
     style = props.style,
     children = props.children,
     value = props.value,
+    className = props.className,
     _onClick = props.onClick;
   var _React$useContext = React.useContext(SliderContext),
     min = _React$useContext.min,
@@ -16,13 +18,15 @@ var Mark = function Mark(props) {
     direction = _React$useContext.direction,
     includedStart = _React$useContext.includedStart,
     includedEnd = _React$useContext.includedEnd,
-    included = _React$useContext.included;
+    included = _React$useContext.included,
+    classNames = _React$useContext.classNames;
   var textCls = "".concat(prefixCls, "-text");
 
   // ============================ Offset ============================
   var positionStyle = getDirectionStyle(direction, value, min, max);
+  var active = included && includedStart <= value && value <= includedEnd;
   return /*#__PURE__*/React.createElement("span", {
-    className: classNames(textCls, _defineProperty({}, "".concat(textCls, "-active"), included && includedStart <= value && value <= includedEnd)),
+    className: twMerge(cls(textCls, _defineProperty({}, "".concat(textCls, "-active"), active), classNames.mark, className, active && classNames.activeMark)),
     style: _objectSpread(_objectSpread({}, positionStyle), style),
     onMouseDown: function onMouseDown(e) {
       e.stopPropagation();
diff --git a/es/Marks/index.d.ts b/es/Marks/index.d.ts
index 5db9b7d0c3295a4b277294b5f1297c835f136fca..16c70c1d0afd467783bf13f6f752e2077d1f2530 100644
--- a/es/Marks/index.d.ts
+++ b/es/Marks/index.d.ts
@@ -1,6 +1,7 @@
 import * as React from 'react';
 export interface MarkObj {
     style?: React.CSSProperties;
+    className?: string;
     label?: React.ReactNode;
 }
 export interface InternalMarkObj extends MarkObj {
diff --git a/es/Marks/index.js b/es/Marks/index.js
index b40cae73876e366384d94d27f6fafb7214955f11..cbc45018436ab14ca8ce366bcf47d54039bd7efd 100644
--- a/es/Marks/index.js
+++ b/es/Marks/index.js
@@ -1,17 +1,21 @@
 import * as React from 'react';
 import Mark from "./Mark";
+import cls from 'classnames';
+import SliderContext from "../context";
 var Marks = function Marks(props) {
+  var _React$useContext = React.useContext(SliderContext),
+    classNames = _React$useContext.classNames;
   var prefixCls = props.prefixCls,
     marks = props.marks,
     onClick = props.onClick;
-  var markPrefixCls = "".concat(prefixCls, "-mark");
+  var markPrefixCls = "".concat(prefixCls, "-marks");
 
   // Not render mark if empty
   if (!marks.length) {
     return null;
   }
   return /*#__PURE__*/React.createElement("div", {
-    className: markPrefixCls
+    className: cls(markPrefixCls, classNames.marks)
   }, marks.map(function (_ref) {
     var value = _ref.value,
       style = _ref.style,
diff --git a/es/Steps/Dot.js b/es/Steps/Dot.js
index ef64e9dcc3f92cde0e269f763df27d6c4990d49d..881fadc5a29d5219706fa58a2ad692f5f09bd515 100644
--- a/es/Steps/Dot.js
+++ b/es/Steps/Dot.js
@@ -1,7 +1,8 @@
 import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
 import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
-import classNames from 'classnames';
+import cls from 'classnames';
 import * as React from 'react';
+import { twMerge } from 'tailwind-merge';
 import SliderContext from "../context";
 import { getDirectionStyle } from "../util";
 var Dot = function Dot(props) {
@@ -15,7 +16,8 @@ var Dot = function Dot(props) {
     direction = _React$useContext.direction,
     included = _React$useContext.included,
     includedStart = _React$useContext.includedStart,
-    includedEnd = _React$useContext.includedEnd;
+    includedEnd = _React$useContext.includedEnd,
+    classNames = _React$useContext.classNames;
   var dotClassName = "".concat(prefixCls, "-dot");
   var active = included && includedStart <= value && value <= includedEnd;
 
@@ -25,7 +27,7 @@ var Dot = function Dot(props) {
     mergedStyle = _objectSpread(_objectSpread({}, mergedStyle), typeof activeStyle === 'function' ? activeStyle(value) : activeStyle);
   }
   return /*#__PURE__*/React.createElement("span", {
-    className: classNames(dotClassName, _defineProperty({}, "".concat(dotClassName, "-active"), active)),
+    className: twMerge(cls(dotClassName, _defineProperty({}, "".concat(dotClassName, "-active"), active), classNames.dot, active && classNames.activeDot)),
     style: mergedStyle
   });
 };
diff --git a/es/interface.d.ts b/es/interface.d.ts
index a662c8c97ed9014afa5156e4684aea4649a90b81..10821587df312b602ea0a88d36c1bcba6fd7ca2a 100644
--- a/es/interface.d.ts
+++ b/es/interface.d.ts
@@ -2,6 +2,6 @@ import type React from 'react';
 export type Direction = 'rtl' | 'ltr' | 'ttb' | 'btt';
 export type OnStartMove = (e: React.MouseEvent | React.TouchEvent, valueIndex: number, startValues?: number[]) => void;
 export type AriaValueFormat = (value: number) => string;
-export type SemanticName = 'tracks' | 'track' | 'rail' | 'handle';
+export type SemanticName = 'tracks' | 'track' | 'rail' | 'handle' | 'marks' | 'mark' | 'activeMark' | 'dot' | 'activeDot';
 export type SliderClassNames = Partial<Record<SemanticName, string>>;
 export type SliderStyles = Partial<Record<SemanticName, React.CSSProperties>>;
diff --git a/lib/Marks/Mark.d.ts b/lib/Marks/Mark.d.ts
index 60f677541ad279caddd71d161bbe6d72c88a7f96..3000801d108395da7ced5f111c8f8afeff639c1f 100644
--- a/lib/Marks/Mark.d.ts
+++ b/lib/Marks/Mark.d.ts
@@ -3,6 +3,7 @@ export interface MarkProps {
     prefixCls: string;
     children?: React.ReactNode;
     style?: React.CSSProperties;
+    className?: string;
     value: number;
     onClick: (value: number) => void;
 }
diff --git a/lib/Marks/Mark.js b/lib/Marks/Mark.js
index 1c454285d5d2a2ed97080d36f15c8ea4fcb3ff8b..e390bb1a5a1fbf72ee65b838854128bba81c9d47 100644
--- a/lib/Marks/Mark.js
+++ b/lib/Marks/Mark.js
@@ -10,6 +10,7 @@ var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/obje
 var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
 var _classnames = _interopRequireDefault(require("classnames"));
 var React = _interopRequireWildcard(require("react"));
+var _tailwindMerge = require("tailwind-merge");
 var _context = _interopRequireDefault(require("../context"));
 var _util = require("../util");
 function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
@@ -19,6 +20,7 @@ var Mark = function Mark(props) {
     style = props.style,
     children = props.children,
     value = props.value,
+    className = props.className,
     _onClick = props.onClick;
   var _React$useContext = React.useContext(_context.default),
     min = _React$useContext.min,
@@ -26,13 +28,15 @@ var Mark = function Mark(props) {
     direction = _React$useContext.direction,
     includedStart = _React$useContext.includedStart,
     includedEnd = _React$useContext.includedEnd,
-    included = _React$useContext.included;
+    included = _React$useContext.included,
+    classNames = _React$useContext.classNames;
   var textCls = "".concat(prefixCls, "-text");
 
   // ============================ Offset ============================
   var positionStyle = (0, _util.getDirectionStyle)(direction, value, min, max);
+  var active = included && includedStart <= value && value <= includedEnd;
   return /*#__PURE__*/React.createElement("span", {
-    className: (0, _classnames.default)(textCls, (0, _defineProperty2.default)({}, "".concat(textCls, "-active"), included && includedStart <= value && value <= includedEnd)),
+    className: (0, _tailwindMerge.twMerge)((0, _classnames.default)(textCls, (0, _defineProperty2.default)({}, "".concat(textCls, "-active"), active), classNames.mark, className, active && classNames.activeMark)),
     style: (0, _objectSpread2.default)((0, _objectSpread2.default)({}, positionStyle), style),
     onMouseDown: function onMouseDown(e) {
       e.stopPropagation();
diff --git a/lib/Marks/index.d.ts b/lib/Marks/index.d.ts
index 5db9b7d0c3295a4b277294b5f1297c835f136fca..16c70c1d0afd467783bf13f6f752e2077d1f2530 100644
--- a/lib/Marks/index.d.ts
+++ b/lib/Marks/index.d.ts
@@ -1,6 +1,7 @@
 import * as React from 'react';
 export interface MarkObj {
     style?: React.CSSProperties;
+    className?: string;
     label?: React.ReactNode;
 }
 export interface InternalMarkObj extends MarkObj {
diff --git a/lib/Marks/index.js b/lib/Marks/index.js
index 5754e5ce350df09f6506d65ae37363e886d47b20..e0c8c1b5b9aad8ea8ec4fcc36355adcec65ff6a0 100644
--- a/lib/Marks/index.js
+++ b/lib/Marks/index.js
@@ -8,20 +8,24 @@ Object.defineProperty(exports, "__esModule", {
 exports.default = void 0;
 var React = _interopRequireWildcard(require("react"));
 var _Mark = _interopRequireDefault(require("./Mark"));
+var _classnames = _interopRequireDefault(require("classnames"));
+var _context = _interopRequireDefault(require("../context"));
 function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
 function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
 var Marks = function Marks(props) {
+  var _React$useContext = React.useContext(_context.default),
+    classNames = _React$useContext.classNames;
   var prefixCls = props.prefixCls,
     marks = props.marks,
     onClick = props.onClick;
-  var markPrefixCls = "".concat(prefixCls, "-mark");
+  var markPrefixCls = "".concat(prefixCls, "-marks");
 
   // Not render mark if empty
   if (!marks.length) {
     return null;
   }
   return /*#__PURE__*/React.createElement("div", {
-    className: markPrefixCls
+    className: (0, _classnames.default)(markPrefixCls, classNames.marks)
   }, marks.map(function (_ref) {
     var value = _ref.value,
       style = _ref.style,
diff --git a/lib/Steps/Dot.js b/lib/Steps/Dot.js
index 2aad5045590026a56bc0d47a4f19c6909bfd607a..42443ee96bc56a38b81746d44240bd5b3137939f 100644
--- a/lib/Steps/Dot.js
+++ b/lib/Steps/Dot.js
@@ -10,6 +10,7 @@ var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/de
 var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
 var _classnames = _interopRequireDefault(require("classnames"));
 var React = _interopRequireWildcard(require("react"));
+var _tailwindMerge = require("tailwind-merge");
 var _context = _interopRequireDefault(require("../context"));
 var _util = require("../util");
 function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
@@ -25,7 +26,8 @@ var Dot = function Dot(props) {
     direction = _React$useContext.direction,
     included = _React$useContext.included,
     includedStart = _React$useContext.includedStart,
-    includedEnd = _React$useContext.includedEnd;
+    includedEnd = _React$useContext.includedEnd,
+    classNames = _React$useContext.classNames;
   var dotClassName = "".concat(prefixCls, "-dot");
   var active = included && includedStart <= value && value <= includedEnd;
 
@@ -35,7 +37,7 @@ var Dot = function Dot(props) {
     mergedStyle = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, mergedStyle), typeof activeStyle === 'function' ? activeStyle(value) : activeStyle);
   }
   return /*#__PURE__*/React.createElement("span", {
-    className: (0, _classnames.default)(dotClassName, (0, _defineProperty2.default)({}, "".concat(dotClassName, "-active"), active)),
+    className: (0, _tailwindMerge.twMerge)((0, _classnames.default)(dotClassName, (0, _defineProperty2.default)({}, "".concat(dotClassName, "-active"), active), classNames.dot, active && classNames.activeDot)),
     style: mergedStyle
   });
 };
diff --git a/lib/interface.d.ts b/lib/interface.d.ts
index a662c8c97ed9014afa5156e4684aea4649a90b81..10821587df312b602ea0a88d36c1bcba6fd7ca2a 100644
--- a/lib/interface.d.ts
+++ b/lib/interface.d.ts
@@ -2,6 +2,6 @@ import type React from 'react';
 export type Direction = 'rtl' | 'ltr' | 'ttb' | 'btt';
 export type OnStartMove = (e: React.MouseEvent | React.TouchEvent, valueIndex: number, startValues?: number[]) => void;
 export type AriaValueFormat = (value: number) => string;
-export type SemanticName = 'tracks' | 'track' | 'rail' | 'handle';
+export type SemanticName = 'tracks' | 'track' | 'rail' | 'handle' | 'marks' | 'mark' | 'activeMark' | 'dot' | 'activeDot';
 export type SliderClassNames = Partial<Record<SemanticName, string>>;
 export type SliderStyles = Partial<Record<SemanticName, React.CSSProperties>>;
diff --git a/package.json b/package.json
index 08efda1f8bb4bff64e3e192b1935115c41c42c72..d3a008c06e730ad3ece1b7d4e9a85e4bfc900220 100644
--- a/package.json
+++ b/package.json
@@ -43,7 +43,8 @@
   "dependencies": {
     "@babel/runtime": "^7.10.1",
     "classnames": "^2.2.5",
-    "rc-util": "^5.36.0"
+    "rc-util": "^5.36.0",
+    "tailwind-merge": "^2.3.0"
   },
   "devDependencies": {
     "@rc-component/father-plugin": "^1.0.2",
@@ -51,6 +52,7 @@
     "@testing-library/react": "^12.1.3",
     "@types/classnames": "^2.2.9",
     "@types/jest": "^29.5.1",
+    "@types/node": "^20.14.9",
     "@types/react": "^18.2.42",
     "@types/react-dom": "^18.0.11",
     "@umijs/fabric": "^4.0.1",
