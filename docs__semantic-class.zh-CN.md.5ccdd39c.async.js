"use strict";(self.webpackChunkmetis_ui=self.webpackChunkmetis_ui||[]).push([[4272],{85509:function(e,a,s){s.r(a);s(37496),s(82857),s(91238),s(83120),s(48415),s(95300),s(11024),s(65110),s(10006),s(18637),s(741),s(30166),s(91512);var n=s(35055),d=s(30158),l=s(39546),c=s(41966),t=s(74132);a.default=function(){return(0,t.jsx)(n.DumiPage,{children:(0,t.jsx)(l.Suspense,{fallback:(0,t.jsx)(d.Z,{}),children:(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)("div",{className:"markdown",children:[(0,t.jsxs)("p",{children:[c.texts[0].value,(0,t.jsx)("code",{children:c.texts[1].value}),c.texts[2].value,(0,t.jsx)("code",{children:c.texts[3].value}),c.texts[4].value,(0,t.jsx)("code",{children:c.texts[5].value}),c.texts[6].value]}),(0,t.jsxs)("p",{children:[c.texts[7].value,(0,t.jsx)("code",{children:c.texts[8].value}),c.texts[9].value]}),(0,t.jsxs)("h2",{id:"字符串",children:[(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#字符串",children:(0,t.jsx)("span",{className:"icon icon-link"})}),"字符串"]}),(0,t.jsx)("p",{children:c.texts[10].value})]}),(0,t.jsx)(n.DumiDemo,{demo:{id:"docs-semantic-class-demo-zh-cn-0"},previewerProps:{readonly:!0}}),(0,t.jsxs)("div",{className:"markdown",children:[(0,t.jsxs)("h2",{id:"json-对象",children:[(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#json-对象",children:(0,t.jsx)("span",{className:"icon icon-link"})}),"JSON 对象"]}),(0,t.jsx)("p",{children:c.texts[11].value}),(0,t.jsxs)("p",{children:[c.texts[12].value,(0,t.jsx)(n.Link,{to:"/components/card-cn#semantic-dom",children:c.texts[13].value}),c.texts[14].value]})]}),(0,t.jsx)(n.DumiDemo,{demo:{id:"docs-semantic-class-demo-zh-cn-1"},previewerProps:{readonly:!0}}),(0,t.jsxs)("div",{className:"markdown",children:[(0,t.jsxs)("h2",{id:"function-对象",children:[(0,t.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#function-对象",children:(0,t.jsx)("span",{className:"icon icon-link"})}),"Function 对象"]}),(0,t.jsx)("p",{children:c.texts[15].value}),(0,t.jsxs)("p",{children:[c.texts[16].value,(0,t.jsx)(n.Link,{to:"/components/tree-cn#semantic-dom",children:c.texts[17].value}),c.texts[18].value]})]}),(0,t.jsx)(n.DumiDemo,{demo:{id:"docs-semantic-class-demo-zh-cn-2"},previewerProps:{readonly:!0}})]})})})}},41966:function(e,a,s){s.r(a),s.d(a,{texts:function(){return n}});const n=[{value:"Metis UI 组件 ",paraId:0},{value:"className",paraId:0},{value:" 属性并非我们常见的 ",paraId:0},{value:"string",paraId:0},{value:" 类型，而是支持多种类型的混合类型，这样做的目的是为了方便使用者使用 ",paraId:0},{value:"tailwindcss",paraId:0},{value:" 样式覆盖默认的组件样式。",paraId:0},{value:"本文将带你了解 ",paraId:1},{value:"className",paraId:1},{value:" 各种类型的使用方法。",paraId:1},{value:"和传统用法一致，className会作用于组件的根节点。",paraId:2,tocIndex:0},{value:"可以自定义组件子元素的样式。",paraId:3,tocIndex:1},{value:"具体类型会根据组件不同，而各不相同，你可以通过",paraId:4,tocIndex:1},{value:"组件 API",paraId:5,tocIndex:1},{value:"了解。",paraId:4,tocIndex:1},{value:"可以根据组件不同状态，定义不同的样式。",paraId:6,tocIndex:2},{value:"具体参数会根据组件不同，而各不相同，你可以通过",paraId:7,tocIndex:2},{value:"组件 API",paraId:8,tocIndex:2},{value:"了解。",paraId:7,tocIndex:2}]}}]);