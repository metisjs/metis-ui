"use strict";(self.webpackChunkmetis_ui=self.webpackChunkmetis_ui||[]).push([[2579],{21371:function(e,a,n){n.d(a,{b:function(){return l}});var t=n(39546),r=(n(33101),n(87802),n(23506),n(18537),n(34706)),o=n(89364),d=n(16013),i=n(41936),u=(t.Component,n(65056)),s={subtree:!0,childList:!0,attributeFilter:["style","class"]};function l(e,a){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:s;t.useEffect((function(){if((0,u.Z)()&&e){var t,r=Array.isArray(e)?e:[e];return"MutationObserver"in window&&(t=new MutationObserver(a),r.forEach((function(e){t.observe(e,n)}))),function(){var e,a;null===(e=t)||void 0===e||e.takeRecords(),null===(a=t)||void 0===a||a.disconnect()}}}),[n,e])}},76014:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(39546);var t={}},57299:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(39546);var t={}},29448:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(39546);var t={}},63420:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(39546);var t={}},2605:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(39546);var t={}},67718:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(39546);var t={}},88463:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(39546);var t={}},56784:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(39546);var t={}},92550:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(39546);var t={}},5323:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(39546);var t={}},97900:function(e,a,n){n.r(a),n.d(a,{demos:function(){return I}});var t,r,o,d=n(90228),i=n.n(d),u=n(87999),s=n.n(u),l=n(39546),p=n(11801),c=n(92475),I={"docs-semantic-class-demo-zh-cn-0":{component:l.memo(l.lazy(s()(i()().mark((function e(){var a,t,r,o;return i()().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Promise.resolve().then(n.bind(n,11801));case 2:return a=e.sent,t=a.MagnifyingGlassOutline,e.next=6,Promise.resolve().then(n.bind(n,92475));case 6:return r=e.sent,o=r.Button,e.abrupt("return",{default:function(){return l.createElement(o,{type:"primary",icon:l.createElement(t,null),className:"bg-pink-500 text-white enabled:hover:bg-pink-400"},"Search")}});case 9:case"end":return e.stop()}}),e)}))))),asset:{type:"BLOCK",id:"docs-semantic-class-demo-zh-cn-0",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:"import { MagnifyingGlassOutline } from '@metisjs/icons';\nimport { Button } from 'metis-ui';\n\nexport default () => (\n  <Button\n    type=\"primary\"\n    icon={<MagnifyingGlassOutline />}\n    className=\"bg-pink-500 text-white enabled:hover:bg-pink-400\"\n  >\n    Search\n  </Button>\n);"},"@metisjs/icons":{type:"NPM",value:"1.1.0"},"metis-ui":{type:"NPM",value:"1.2.0"}},entry:"index.tsx"},context:{"@metisjs/icons":p,"metis-ui":c},renderOpts:{compile:(o=s()(i()().mark((function e(){var a,t=arguments;return i()().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([n.e(6379),n.e(1317)]).then(n.bind(n,61317));case 2:return e.abrupt("return",(a=e.sent).default.apply(a,t));case 3:case"end":return e.stop()}}),e)}))),function(){return o.apply(this,arguments)})}},"docs-semantic-class-demo-zh-cn-1":{component:l.memo(l.lazy(s()(i()().mark((function e(){var a,t;return i()().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Promise.resolve().then(n.bind(n,92475));case 2:return a=e.sent,t=a.Card,e.abrupt("return",{default:function(){return l.createElement(t,{title:"Title",className:{root:"w-75",header:"bg-pink-400",body:"bg-pink-200 p-3",title:"text-primary"}},"Card content")}});case 5:case"end":return e.stop()}}),e)}))))),asset:{type:"BLOCK",id:"docs-semantic-class-demo-zh-cn-1",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:"import { Card } from 'metis-ui';\n\nexport default () => (\n  <Card\n    title=\"Title\"\n    className={{\n      root: 'w-75',\n      header: 'bg-pink-400',\n      body: 'bg-pink-200 p-3',\n      title: 'text-primary',\n    }}\n  >\n    Card content\n  </Card>\n);"},"metis-ui":{type:"NPM",value:"1.2.0"}},entry:"index.tsx"},context:{"metis-ui":c},renderOpts:{compile:(r=s()(i()().mark((function e(){var a,t=arguments;return i()().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([n.e(6379),n.e(1317)]).then(n.bind(n,61317));case 2:return e.abrupt("return",(a=e.sent).default.apply(a,t));case 3:case"end":return e.stop()}}),e)}))),function(){return r.apply(this,arguments)})}},"docs-semantic-class-demo-zh-cn-2":{component:l.memo(l.lazy(s()(i()().mark((function e(){var a,t,r;return i()().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Promise.resolve().then(n.bind(n,92475));case 2:return a=e.sent,t=a.clsx,r=a.Tree,e.abrupt("return",{default:function(){return l.createElement(r,{showIcon:!0,defaultExpandedKeys:["0-0"],defaultSelectedKeys:["0-0-0-0"],treeData:[{title:"parent 1",key:"0-0",children:[{title:"leaf",key:"0-0-0-0",disableCheckbox:!0},{title:"leaf",key:"0-0-0-1"}]}],className:{root:"w-[240px]",node:function(e){var a=e.selected,n=(e.expanded,e.leaf);e.halfChecked,e.checked;return t({"bg-pink-200":a,"text-pink-500":a&&n})}}})}});case 6:case"end":return e.stop()}}),e)}))))),asset:{type:"BLOCK",id:"docs-semantic-class-demo-zh-cn-2",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:"import { DocumentTextSolid, FolderCloseSolid, FolderOpenSolid } from '@metisjs/icons';\nimport { clsx, Tree } from 'metis-ui';\n\nexport default () => (\n  <Tree\n    showIcon\n    defaultExpandedKeys={['0-0']}\n    defaultSelectedKeys={['0-0-0-0']}\n    treeData={[\n      {\n        title: 'parent 1',\n        key: '0-0',\n        children: [\n          {\n            title: 'leaf',\n            key: '0-0-0-0',\n            disableCheckbox: true,\n          },\n          {\n            title: 'leaf',\n            key: '0-0-0-1',\n          },\n        ],\n      },\n    ]}\n    className={{\n      root: 'w-[240px]',\n      node: ({ selected, expanded, leaf, halfChecked, checked }) =>\n        clsx({\n          'bg-pink-200': selected,\n          'text-pink-500': selected && leaf,\n        }),\n    }}\n  />\n);"},"metis-ui":{type:"NPM",value:"1.2.0"}},entry:"index.tsx"},context:{"metis-ui":c},renderOpts:{compile:(t=s()(i()().mark((function e(){var a,t=arguments;return i()().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([n.e(6379),n.e(1317)]).then(n.bind(n,61317));case 2:return e.abrupt("return",(a=e.sent).default.apply(a,t));case 3:case"end":return e.stop()}}),e)}))),function(){return t.apply(this,arguments)})}}}},85034:function(e,a,n){n.r(a),n.d(a,{demos:function(){return c}});var t,r,o=n(90228),d=n.n(o),i=n(87999),u=n.n(i),s=n(39546),l=n(11801),p=n(92475),c={"docs-style-override-demo-zh-cn-0":{component:s.memo(s.lazy(u()(d()().mark((function e(){var a,t,r,o,i,u,l;return d()().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Promise.resolve().then(n.bind(n,11801));case 2:return a=e.sent,t=a.MagnifyingGlassOutline,e.next=6,Promise.resolve().then(n.bind(n,92475));case 6:return r=e.sent,o=r.Button,i=r.ConfigProvider,u=r.Input,l=r.Space,e.abrupt("return",{default:function(){return s.createElement(i,{button:{className:{root:"outline-primary rounded-xl",icon:"size-5"}},input:{className:{root:"outline-primary rounded-xl",prefix:"text-error",suffix:"text-error"}}},s.createElement(l,{vertical:!0},s.createElement(u,{prefix:"￥",suffix:"RMB"}),s.createElement(o,{icon:s.createElement(t,null)},"Submit")))}});case 12:case"end":return e.stop()}}),e)}))))),asset:{type:"BLOCK",id:"docs-style-override-demo-zh-cn-0",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:"import { MagnifyingGlassOutline } from '@metisjs/icons';\nimport { Button, ConfigProvider, Input, Space } from 'metis-ui';\n\nexport default () => (\n  <ConfigProvider\n    button={{ className: { root: 'outline-primary rounded-xl', icon: 'size-5' } }}\n    input={{\n      className: { root: 'outline-primary rounded-xl', prefix: 'text-error', suffix: 'text-error' },\n    }}\n  >\n    <Space vertical>\n      <Input prefix=\"￥\" suffix=\"RMB\" />\n      <Button icon={<MagnifyingGlassOutline />}>Submit</Button>\n    </Space>\n  </ConfigProvider>\n);"},"@metisjs/icons":{type:"NPM",value:"1.1.0"},"metis-ui":{type:"NPM",value:"1.2.0"}},entry:"index.tsx"},context:{"@metisjs/icons":l,"metis-ui":p},renderOpts:{compile:(r=u()(d()().mark((function e(){var a,t=arguments;return d()().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([n.e(6379),n.e(1317)]).then(n.bind(n,61317));case 2:return e.abrupt("return",(a=e.sent).default.apply(a,t));case 3:case"end":return e.stop()}}),e)}))),function(){return r.apply(this,arguments)})}},"docs-style-override-demo-zh-cn-1":{component:s.memo(s.lazy(u()(d()().mark((function e(){var a,t,r,o;return d()().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Promise.resolve().then(n.bind(n,11801));case 2:return a=e.sent,t=a.MagnifyingGlassOutline,e.next=6,Promise.resolve().then(n.bind(n,92475));case 6:return r=e.sent,o=r.Button,e.abrupt("return",{default:function(){return s.createElement(o,{type:"primary",icon:s.createElement(t,null),className:"bg-pink-500 text-white enabled:hover:bg-pink-400"},"Search")}});case 9:case"end":return e.stop()}}),e)}))))),asset:{type:"BLOCK",id:"docs-style-override-demo-zh-cn-1",refAtomIds:[],dependencies:{"index.tsx":{type:"FILE",value:"import { MagnifyingGlassOutline } from '@metisjs/icons';\nimport { Button } from 'metis-ui';\n\nexport default () => (\n  <Button\n    type=\"primary\"\n    icon={<MagnifyingGlassOutline />}\n    className=\"bg-pink-500 text-white enabled:hover:bg-pink-400\"\n  >\n    Search\n  </Button>\n);"},"@metisjs/icons":{type:"NPM",value:"1.1.0"},"metis-ui":{type:"NPM",value:"1.2.0"}},entry:"index.tsx"},context:{"@metisjs/icons":l,"metis-ui":p},renderOpts:{compile:(t=u()(d()().mark((function e(){var a,t=arguments;return d()().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([n.e(6379),n.e(1317)]).then(n.bind(n,61317));case 2:return e.abrupt("return",(a=e.sent).default.apply(a,t));case 3:case"end":return e.stop()}}),e)}))),function(){return t.apply(this,arguments)})}}}},76436:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(39546);var t={}},13605:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(39546);var t={}},73836:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(39546);var t={}},98107:function(e,a,n){n.r(a),n.d(a,{demos:function(){return t}});n(39546);var t={}},30588:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});const t=[{value:"metisui",paraId:0},{value:" 目前的默认文案是英文，如果需要使用其他语言，可以参考下面的方案。",paraId:0},{value:"metisui 提供了一个 React 组件 ",paraId:1,tocIndex:0},{value:"ConfigProvider",paraId:2,tocIndex:0},{value:" 用于全局配置国际化文案。",paraId:1,tocIndex:0},{value:"import zhCN from 'metis-ui/locale/zh_CN';\n\nreturn (\n  <ConfigProvider locale={zhCN}>\n    <App />\n  </ConfigProvider>\n);\n",paraId:3,tocIndex:0},{value:"详细配置见：",paraId:4,tocIndex:0},{value:"ConfigProvider",paraId:5,tocIndex:0},{value:"。",paraId:4,tocIndex:0},{value:"注意：",paraId:6,tocIndex:0},{value:"zh_CN",paraId:6,tocIndex:0},{value:" 是文件名，以下表格也遵循同样的规则。",paraId:6,tocIndex:0},{value:"目前支持以下语言：",paraId:7,tocIndex:0},{value:"语言",paraId:8,tocIndex:0},{value:"文件名",paraId:8,tocIndex:0},{value:"英语",paraId:8,tocIndex:0},{value:"en_US",paraId:8,tocIndex:0},{value:"简体中文",paraId:8,tocIndex:0},{value:"zh_CN",paraId:8,tocIndex:0},{value:"具体的使用方法请参考 ",paraId:9,tocIndex:0},{value:"ConfigProvider 文档",paraId:10,tocIndex:0},{value:"。",paraId:9,tocIndex:0}]},19552:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});const t=[{value:"在开始之前，推荐先学习 ",paraId:0},{value:"React",paraId:0},{value:"，请确保项目已满足以下环境要求：",paraId:0},{value:"Node.js",paraId:1},{value:" v16 或以上",paraId:1},{value:"React",paraId:1},{value:" v18 或以上",paraId:1},{value:"Tailwind CSS",paraId:1},{value:" v4 或以上",paraId:1},{value:"如果需要从零开始构建项目，可以参考在 ",paraId:2},{value:"Vite",paraId:3},{value:"、",paraId:2},{value:"Next.js",paraId:4},{value:"或",paraId:2},{value:"Umi",paraId:5},{value:" 中使用指南。",paraId:2},{value:"推荐使用 ",paraId:6,tocIndex:0},{value:"pnpm",paraId:6,tocIndex:0},{value:" 的方式进行开发。",paraId:6,tocIndex:0},{value:"向你的入口 CSS 文件添加一个 ",paraId:7,tocIndex:1},{value:"@plugin",paraId:7,tocIndex:1},{value:" 以导入 Metis UI。",paraId:7,tocIndex:1},{value:"@import 'tailwindcss';\n\n@source './node_modules/metis-ui/es'; /* 此处只能使用相对路径，需要根据实际入口CSS路径做修改 */\n@plugin 'metis-ui/plugin';\n",paraId:8,tocIndex:1}]},82174:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});const t=[{value:"Metis UI 的目标是为那些喜欢 Ant Design 的开发者提供一个更灵活的选择，特别是希望结合 Tailwind CSS 的开发者。我们在保留 Ant Design 组件设计逻辑的基础上，提供了以下改进：",paraId:0},{value:"样式覆盖更灵活基于 Tailwind CSS 的样式体系，开发者可以方便地对组件的各个元素进行样式覆盖，无需编写复杂的自定义样式，快速实现个性化设计。",paraId:1},{value:"增强的交互功能内置了一些常用的交互功能，例如远程数据请求、值类型格式化、值类型枚举等，减少开发者在这些场景下的重复工作。",paraId:1},{value:"轻量化与现代化通过 Tailwind CSS 和 TypeScript 的结合，提供更现代化的开发体验，同时保持组件的高可定制性和一致性。",paraId:1},{value:"Metis UI 是为那些希望在 Ant Design 的设计逻辑基础上，享受 Tailwind CSS 灵活性的开发者量身定制的解决方案。",paraId:2},{value:"🌈 参考 Ant Design 的组件设计，拥有丰富的组件支持。",paraId:3,tocIndex:0},{value:"🎨 基于 Tailwind CSS 的样式，可以快速覆盖默认样式。",paraId:3,tocIndex:0},{value:"🛡 使用 TypeScript 开发，提供完整的类型定义文件。",paraId:3,tocIndex:0},{value:"⚙️ 深入每个细节的主题样式定制能力。",paraId:3,tocIndex:0},{value:"Chrome 111+",paraId:4,tocIndex:1},{value:"Safari 16.4+",paraId:4,tocIndex:1},{value:"Firefox 128+",paraId:4,tocIndex:1},{value:"推荐使用 ",paraId:5,tocIndex:3},{value:"pnpm",paraId:5,tocIndex:3},{value:" 的方式进行开发",paraId:5,tocIndex:3},{value:"，不仅可在开发环境轻松调试，也可放心地在生产环境打包部署使用，享受整个生态圈和工具链带来的诸多好处。",paraId:5,tocIndex:3}]},45242:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});const t=[{value:"本项目基于 ",paraId:0},{value:"Vite",paraId:0},{value:" 作为前端构建工具，采用了现代化的开发流程和高效的模块热更新机制。我们对目录结构进行了详细的功能划分，遵循“约定优于配置”的原则，便于团队协作和项目维护。",paraId:0},{value:"各目录和文件的职责如下：",paraId:1},{value:"public",paraId:2},{value:"：存放无需构建即可直接访问的静态资源，如 favicon、全局图片等。",paraId:2},{value:"src",paraId:2},{value:"：核心源码目录，按照功能模块细分，提升可读性和可维护性。\n",paraId:2},{value:"apis",paraId:3},{value:"：统一管理所有后端接口请求，便于接口复用和维护。",paraId:3},{value:"assets",paraId:3},{value:"：集中存放图片、SVG 等静态资源，方便统一管理和引用。",paraId:3},{value:"components",paraId:3},{value:"：封装通用 UI 组件，实现高复用性和低耦合。",paraId:3},{value:"hooks",paraId:3},{value:"：自定义 React Hooks，抽离通用逻辑，提升代码复用率。",paraId:3},{value:"layouts",paraId:3},{value:"：页面布局相关组件，支持多种页面结构切换。",paraId:3},{value:"locale",paraId:3},{value:"：国际化资源文件，支持多语言切换。",paraId:3},{value:"mocks",paraId:3},{value:"：本地 mock 数据和服务，便于开发和测试。",paraId:3},{value:"pages",paraId:3},{value:"：页面级组件，按路由划分，结构清晰。",paraId:3},{value:"store",paraId:3},{value:"：基于 Zustand 的全局状态管理，简洁高效。",paraId:3},{value:"types",paraId:3},{value:"：TypeScript 类型定义，提升类型安全和开发体验。",paraId:3},{value:"utils",paraId:3},{value:"：通用工具函数和工具类，便于全局调用。",paraId:3},{value:"其他入口文件和配置文件，确保项目结构清晰、职责明确。",paraId:3},{value:"通过这样的目录约定，能够快速定位和管理项目中的各类资源和代码，降低维护成本，提升开发效率。适合中大型团队协作开发，也便于后续功能扩展和技术升级。",paraId:4},{value:"├── .husky                     # Husky 钩子配置目录\n├── public                     # 公共静态资源目录\n├── src                        # 源码目录\n│   ├── apis                   # 服务端接口请求相关\n│   ├── assets                 # 静态资源（图片、SVG等）\n│   ├── components             # 通用组件\n│   ├── hooks                  # 自定义 hooks\n│   ├── layouts                # 页面布局组件\n│   ├── locale                 # 国际化资源\n│   ├── mocks                  # Mock 数据与服务\n│   ├── pages                  # 页面组件\n│   ├── store                  # Zustand 状态管理\n│   ├── types                  # TypeScript 类型定义\n│   ├── utils                  # 工具函数与工具类\n│   ├── loading.tsx            # 全局 Loading 组件\n│   ├── main.tsx               # 应用入口文件\n│   ├── routes.tsx             # 路由和菜单配置\n│   └── vite-env.d.ts          # Vite 环境类型声明\n├── .env                       # 环境变量配置文件\n├── .lintstagedrc              # lint-staged 配置文件\n├── .prettierignore            # Prettier 忽略文件配置\n├── .prettierrc                # Prettier 代码格式化配置\n├── commitlint.config.js       # 提交规范校验配置\n├── eslint.config.js           # ESLint 代码规范配置\n├── index.html                 # 项目入口 HTML\n├── package.json               # 项目依赖与脚本配置\n├── tailwind.css               # TailwindCSS 全局样式入口\n├── tsconfig.app.json          # TS 应用配置\n├── tsconfig.json              # TS 根配置\n├── tsconfig.node.json         # TS Node 配\n",paraId:5,tocIndex:0}]},63139:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});const t=[{value:"Metis Plus",paraId:0},{value:" 是一个企业中后台系统模板，基于 ",paraId:0},{value:"React",paraId:0},{value:"、",paraId:0},{value:"react-router",paraId:0},{value:"、",paraId:0},{value:"TypeScript",paraId:0},{value:"、",paraId:0},{value:"Vite",paraId:0},{value:"、",paraId:0},{value:"TailwindCSS",paraId:0},{value:"、",paraId:0},{value:"Zustand",paraId:0},{value:"、",paraId:0},{value:"faker-js",paraId:0},{value:"、",paraId:0},{value:"MSW",paraId:0},{value:" 等技术栈构建。它内置了开箱即用的数据流、国际化、菜单、模拟数据、权限管理、主题切换等功能，助力企业快速搭建高质量的中后台应用。",paraId:0},{value:"$ git clone https://github.com/metisjs/metis-plus.git\n$ cd metis-plus\n",paraId:1,tocIndex:0},{value:"推荐使用 ",paraId:2,tocIndex:1},{value:"pnpm",paraId:2,tocIndex:1},{value:" 的方式进行开发。",paraId:2,tocIndex:1},{value:"启动后可在浏览器中访问本地开发环境。",paraId:3}]},59238:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});const t=[{value:"本项目使用了 ",paraId:0},{value:"i18next",paraId:0},{value:" 和 ",paraId:0},{value:"react-i18next",paraId:0},{value:" 实现国际化功能。",paraId:0},{value:"\ni18next 提供了强大的多语言支持，react-i18next 则为 React 应用集成了便捷的国际化解决方案。",paraId:0},{value:"更多信息请参考：",paraId:1},{value:"i18next 官方文档",paraId:1},{value:" 和 ",paraId:1},{value:"react-i18next 官方文档",paraId:1},{value:"。",paraId:1},{value:"├── locale\n│   ├── en-US.json\n│   └── zh-CN.json\n",paraId:2,tocIndex:0}]},30659:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});const t=[{value:"本项目使用 ",paraId:0},{value:"msw",paraId:0},{value:" 进行接口请求的模拟，并结合 ",paraId:0},{value:"faker-js",paraId:0},{value:" 生成随机数据，方便开发和测试。",paraId:0},{value:"msw",paraId:1},{value:": Mock Service Worker，拦截并模拟网络请求，支持 REST 和 GraphQL。",paraId:1},{value:"faker-js",paraId:1},{value:": 用于生成各种类型的假数据，如姓名、地址、图片等。",paraId:1},{value:"你可以在 ",paraId:2},{value:"mocks",paraId:2},{value:" 目录下查看具体实现方式，或参考 ",paraId:2},{value:"官方文档",paraId:2},{value:" 和 ",paraId:2},{value:"faker-js 文档",paraId:2},{value:" 了解更多用法。",paraId:2},{value:"├── mocks\n│   ├── handlers           # 存放所有的请求处理器\n│   │   ├── index.ts       # 处理器入口文件，统一导出各模块处理器\n│   │   └── user.ts        # 用户相关的 mock 接口处理器\n│   └── browser.ts         # 配置并启动 mock 服务的入口文件\n",paraId:3,tocIndex:0},{value:"在 ",paraId:4,tocIndex:1},{value:"src/mocks/handlers",paraId:4,tocIndex:1},{value:" 目录下创建文件 ",paraId:4,tocIndex:1},{value:"faker-list.ts",paraId:4,tocIndex:1},{value:"。",paraId:4,tocIndex:1},{value:"import { faker } from '@faker-js/faker';\nimport { delay, http, HttpResponse } from 'msw';\nimport type { CurrentUser } from '@/types/user';\nimport type { UserPermissions } from '@/utils/auth';\n\nconst userHandles = [\n  http.get('/api/faker-list', async ({ request }) => {\n    await delay(600);\n\n    return HttpResponse.json({\n      success: true,\n      data: [\n        /* 模拟数据，你可以通过faker-js来生成 */\n      ],\n    });\n  }),\n];\n\nexport default userHandles;\n",paraId:5,tocIndex:1},{value:"在 ",paraId:6,tocIndex:1},{value:"src/mocks/handlers/index.ts",paraId:6,tocIndex:1},{value:" 中引用文件。",paraId:6,tocIndex:1},{value:"import fakerListHandlers from './faker-list';\nimport userHandlers from './user';\n\nexport default [\n  ...userHandlers,\n  ...fakerListHandlers\n];\n",paraId:7,tocIndex:1},{value:"现在当发送 ",paraId:8,tocIndex:1},{value:"[GET]/api/faker-list",paraId:8,tocIndex:1},{value:" 请求时就会被拦截了。",paraId:8,tocIndex:1}]},61371:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});const t=[{value:"权限控制是中后台场景非常常见的基础功能，Metis Plus 提供了完整的权限管理解决方案，包括用户认证、权限校验、菜单过滤、路由守卫等功能。",paraId:0},{value:"Metis Plus 的权限系统基于 ",paraId:1,tocIndex:0},{value:"RBAC（基于角色的访问控制）",paraId:1,tocIndex:0},{value:" 模型设计，主要包含以下几个核心概念：",paraId:1,tocIndex:0},{value:"用户（User）",paraId:2,tocIndex:0},{value:"：系统的使用者",paraId:2,tocIndex:0},{value:"权限（Permission）",paraId:2,tocIndex:0},{value:"：具体的操作权限，由资源和动作组成",paraId:2,tocIndex:0},{value:"资源（Resource）",paraId:2,tocIndex:0},{value:"：系统中的功能模块或数据实体",paraId:2,tocIndex:0},{value:"动作（Action）",paraId:2,tocIndex:0},{value:"：对资源的具体操作，如读取、编辑、删除等",paraId:2,tocIndex:0},{value:"export type UserPermissions = {\n  resource: string; // 资源名称\n  actions?: string[]; // 允许的操作列表\n}[];\n\n// 示例\nconst userPermissions: UserPermissions = [\n  { resource: 'dashboard', actions: ['view'] },\n  { resource: 'admin', actions: ['read', 'edit', 'delete'] },\n  { resource: 'workplace' }, // 无 actions 表示拥有该资源的所有权限\n];\n",paraId:3,tocIndex:2},{value:"export type Permission =\n  | Auth // 单个权限\n  | Permission[] // 权限数组（且关系）\n  | { and: Permission[] } // 明确的且关系\n  | { or: Permission[] }; // 或关系\n\nexport type Auth = { resource: Resource; actions?: string[] } | Resource; // 可以直接使用字符串或正则\n\ntype Resource = string | RegExp;\n",paraId:4,tocIndex:3},{value:"实际项目中用户权限由服务端返回，这里我们使用 mock 数据代替。",paraId:5,tocIndex:5},{value:"在 ",paraId:6,tocIndex:5},{value:"src/mocks/handlers/user.ts",paraId:6,tocIndex:5},{value:" 中配置不同用户的权限：",paraId:6,tocIndex:5},{value:"http.get('/api/currentUser', async ({ request }) => {\n  const token = request.headers.get('authorization') || '';\n\n  let permissions: UserPermissions = [];\n  if (token === 'fake_token_admin') {\n    permissions = [\n      { resource: 'admin', actions: ['read', 'edit', 'delete'] },\n      { resource: 'dashboard', actions: ['view'] },\n      { resource: 'workplace' },\n    ];\n  } else if (token === 'fake_token_user') {\n    permissions = [{ resource: 'dashboard', actions: ['view'] }, { resource: 'workplace' }];\n  }\n\n  return HttpResponse.json({\n    success: true,\n    data: { permissions /* 其他用户信息 */ },\n  });\n});\n",paraId:7,tocIndex:5},{value:"在 ",paraId:8,tocIndex:6},{value:"src/routes.tsx",paraId:8,tocIndex:6},{value:" 中为路由配置权限：",paraId:8,tocIndex:6},{value:"const routes: Route[] = [\n  {\n    name: 'menu.workplace',\n    icon: <Squares2X2Outline />,\n    path: 'workplace',\n    component: () => import('@/pages/workplace'),\n  },\n  {\n    name: 'menu.admin',\n    icon: <Cog6ToothOutline />,\n    path: 'admin',\n    component: () => import('@/pages/admin'),\n    permission: { resource: 'admin', actions: ['read'] }, // 需要管理员读取权限\n  },\n];\n",paraId:9,tocIndex:6},{value:"用于在组件中进行权限控制：",paraId:10,tocIndex:8},{value:"import Access from '@/components/Access';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      {/* 基本使用 */}\n      <Access permission={{ resource: 'admin' }}>\n        <Button>管理员专用按钮</Button>\n      </Access>\n\n      {/* 带 fallback */}\n      <Access\n        permission={{ resource: 'admin', actions: ['edit'] }}\n        fallback={<span>权限不足</span>}\n      >\n        <Button>编辑</Button>\n      </Access>\n\n      {/* 复杂权限 */}\n      <Access\n        permission={{\n          or: [{ resource: 'admin' }, { resource: 'editor', actions: ['publish'] }],\n        }}\n      >\n        <Button>发布文章</Button>\n      </Access>\n    </div>\n  );\n};\n",paraId:11,tocIndex:8},{value:"菜单系统会自动根据用户权限过滤不可访问的菜单项。权限过滤逻辑在 ",paraId:12,tocIndex:9},{value:"src/utils/menu.ts",paraId:12,tocIndex:9},{value:" 中实现：",paraId:12,tocIndex:9},{value:"export function formatter(\n  { data, t, userPerms }: FormatterProps,\n  parentPath = '/',\n  ignoreFilter = false,\n): MenuDataItem[] {\n  return data\n    .filter((item) => {\n      // 隐藏菜单过滤\n      if (!ignoreFilter && item.hideInMenu) return false;\n      // 权限过滤\n      if (item.permission && !hasPermission(item.permission, userPerms)) return false;\n      return true;\n    })\n    .flatMap((item) => {\n      // 菜单项处理逻辑\n    });\n}\n",paraId:13,tocIndex:9},{value:"路由级别的权限控制通过 ",paraId:14,tocIndex:10},{value:"Access",paraId:14,tocIndex:10},{value:" 组件实现，在 ",paraId:14,tocIndex:10},{value:"src/routes.tsx",paraId:14,tocIndex:10},{value:" 中自动包装：",paraId:14,tocIndex:10},{value:"// src/routes.tsx\nfunction generateRouteObjects(routes: Route[]): RouteObject[] {\n  return routes.map((route) => {\n    const { component, children, permission, ...rest } = route;\n\n    const routeObj: RouteObject = { ...rest };\n\n    if (component) {\n      const Component = lazy(component);\n      routeObj.element = (\n        <Suspense fallback={<Loading />}>\n          <Component />\n        </Suspense>\n      );\n\n      // 自动添加权限守卫\n      if (permission) {\n        routeObj.element = (\n          <Access permission={permission} fallback={<Err403 />}>\n            {routeObj.element}\n          </Access>\n        );\n      }\n    }\n\n    if (Array.isArray(children) && children.length > 0) {\n      routeObj.children = generateRouteObjects(children);\n    }\n\n    return routeObj;\n  });\n}\n",paraId:15,tocIndex:10},{value:"通过以上权限控制系统，Metis Plus 为中后台应用提供了完整、灵活、易用的权限管理解决方案，帮助开发者快速构建安全可靠的企业级应用。",paraId:16,tocIndex:10}]},8209:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});const t=[{value:"路由通常与菜单紧密关联。为了简化维护，我们通过统一的路由配置表自动生成菜单项。这样只需维护一份路由数据，菜单结构会自动同步更新，避免了重复配置和可能出现的不一致问题。",paraId:0},{value:"这种方式不仅提升了开发效率，也保证了路由与菜单的一致性和可维护性。",paraId:1},{value:"{\n  path: '/',\n  component: () => import('@/layouts/MainLayout'),                        // 全局布局组件\n  children: [\n    {\n      index: true,\n      element: <Navigate to=\"/workplace\" replace />,                      // 访问 “/” 时会跳转到“/workplace”\n    },\n    {\n      name: 'menu.workplace',                                             // 菜单名称，支持 i18n key值。只有 name 不为空时才会解析成菜单。\n      icon: <Squares2X2Outline />,                                        // 菜单图标\n      path: 'workplace',                                                  // 菜单 path\n      component: () => import('@/pages/workplace'),                       // 页面组件\n      hideInMenu: true,                                                   // 是否显示为菜单，比如：详情页通常不在菜单页显示，但会在面包屑导航中显示\n      permission: { resource: 'system.user-list', action: ['read'] },     // 权限配置，具体见：[权限配置](/plus-permission-cn)\n      children:[{...}]                                                    // 子菜单或路由\n    }\n  ]\n}\n",paraId:2,tocIndex:0},{value:"在 pages 中新增一个 admin 文件夹，并在其中新增 index.tsx。",paraId:3,tocIndex:1},{value:"import PageContainer from '@/components/PageContainer';\n\nconst Admin = () => {\n  return <PageContainer>Admin</PageContainer>;\n};\n\nexport default Admin;\n",paraId:4,tocIndex:1},{value:"在路由表中新增路由配置。",paraId:5,tocIndex:1},{value:"const routes: Route[] = [\n  {\n    path: loginPath,\n    component: () => import('@/pages/login'),\n  },\n  {\n    path: '/',\n    component: () => import('@/layouts/MainLayout'),\n    children: [\n      {\n        index: true,\n        element: <Navigate to=\"/workplace\" replace />,\n      },\n      {\n        name: 'menu.workplace',\n        icon: <Squares2X2Outline />,\n        path: 'workplace',\n        component: () => import('@/pages/workplace'),\n      },\n      {\n        name: 'menu.admin',\n        icon: <Cog6ToothOutline />,\n        path: 'admin',\n        component: () => import('@/pages/admin'),\n      },\n      {\n        path: '*',\n        component: () => import('@/pages/404'),\n      },\n    ],\n  },\n];\n",paraId:6,tocIndex:1},{value:"添加国际化内容",paraId:7,tocIndex:1},{value:'{\n  "menu.workplace": "工作台",\n  "menu.admin": "系统管理"\n}\n',paraId:8,tocIndex:1},{value:"到这，你已经完成了一个菜单项的配置。现在刷新一下页面，就能看到新的菜单项。",paraId:9,tocIndex:1}]},75731:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});const t=[{value:"在 ",paraId:0},{value:"metisui",paraId:0},{value:" 中，数据展示类组件如 ",paraId:0},{value:"AutoComplete",paraId:1},{value:"、",paraId:0},{value:"Cascader",paraId:2},{value:"、",paraId:0},{value:"List",paraId:3},{value:"、",paraId:0},{value:"Select",paraId:4},{value:"、",paraId:0},{value:"Table",paraId:5},{value:" 和 ",paraId:0},{value:"Tree",paraId:6},{value:" 均支持通过配置 ",paraId:0},{value:"request",paraId:0},{value:" 属性自动加载远程数据。",paraId:0},{value:"request",paraId:0},{value:" 会自动管理加载状态，并在组件支持分页或懒加载时，内部处理数据拼接和分页逻辑，从而简化业务开发流程。",paraId:0},{value:"request",paraId:7},{value:" 内部实现基于",paraId:7},{value:"ahook/useRequest",paraId:7},{value:", 支持除 ",paraId:7},{value:"manual",paraId:7},{value:" 和 ",paraId:7},{value:"refreshDepsAction",paraId:7},{value:" 之外的所有属性。",paraId:7},{value:"我们约定的准备的接口返回类型为：",paraId:8},{value:"type ResponseData<TData extends Record<string, []>> = {\n  data: TData[]; // 数据集\n  total?: number; // 只有在分页或懒加载时需要\n};\n",paraId:9},{value:"如果你的后端数据返回类型和我们的不一样，可以在请求层定义一个适配器来转换它。",paraId:10},{value:"/**\n *  假设返回类型为:\n *  {\n *    success: true,\n *    data: {\n *      list: [...],\n *      total: 100\n *    }\n *  }\n */\nconst request = axios.create({\n  baseURL: import.meta.env.VITE_API_PREFIX,\n  timeout: 10000,\n});\n\nrequest.interceptors.response.use((response) => {\n  const { data: responseData } = response;\n  const { success, data } = responseData;\n\n  // 判断分页接口，根据实际情况调整\n  if (Array.isArray(data?.list) && 'total' in data) {\n    return {\n      ...responseData,\n      data: data.list,\n      total: data.total,\n    };\n  }\n\n  return responseData;\n});\n",paraId:11},{value:"const fetchUsers = () => {...};\n\n<Select options={[...]} request={fetchUsers}/>\n\n// OR\n\n<Select options={[...]} request={{\n  service: fetchUsers\n  options:{\n    ... // useRequest options\n  }\n}}/>\n",paraId:12,tocIndex:0},{value:"当开启懒加载或分页时，分页信息将作为第一个参数传递给请求方法。",paraId:13,tocIndex:1},{value:"const fetchUsers = ({\n  current: number;\n  pageSize: number;\n  filters: { [key: string]: string };\n},/* 其他传入参数 */) => {...};\n\n<Select options={[...]} request={fetchUsers} lazyLoad/>\n\n// OR\n\n<Select options={[...]} request={{\n  service: fetchUsers\n  options:{\n    ... // useRequest options\n  }\n}}\nlazyLoad\n/>\n",paraId:14,tocIndex:1}]},41966:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});const t=[{value:"Metis UI 组件 ",paraId:0},{value:"className",paraId:0},{value:" 属性并非我们常见的 ",paraId:0},{value:"string",paraId:0},{value:" 类型，而是支持多种类型的混合类型，这样做的目的是为了方便使用者使用 ",paraId:0},{value:"tailwindcss",paraId:0},{value:" 样式覆盖默认的组件样式。",paraId:0},{value:"本文将带你了解 ",paraId:1},{value:"className",paraId:1},{value:" 各种类型的使用方法。",paraId:1},{value:"和传统用法一致，className会作用于组件的根节点。",paraId:2,tocIndex:0},{value:"可以自定义组件子元素的样式。",paraId:3,tocIndex:1},{value:"具体类型会根据组件不同，而各不相同，你可以通过",paraId:4,tocIndex:1},{value:"组件 API",paraId:5,tocIndex:1},{value:"了解。",paraId:4,tocIndex:1},{value:"可以根据组件不同状态，定义不同的样式。",paraId:6,tocIndex:2},{value:"具体参数会根据组件不同，而各不相同，你可以通过",paraId:7,tocIndex:2},{value:"组件 API",paraId:8,tocIndex:2},{value:"了解。",paraId:7,tocIndex:2}]},27257:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});const t=[{value:"实际项目中，开发者往往需要对组件进行全局或局部的样式重写，以满足特定的设计需求或品牌规范。Metis UI 提供了多种方式来实现样式覆盖，既可以灵活调整组件的默认样式，也可以针对特定场景进行定制。",paraId:0},{value:"通过修改主题颜色，可以快速调整全局样式以适配品牌需求。具体方法请参考",paraId:1,tocIndex:1},{value:"主题文档",paraId:2,tocIndex:1},{value:"。",paraId:1,tocIndex:1},{value:"ConfigProvider",paraId:3},{value:"ConfigProvider",paraId:4,tocIndex:2},{value:" 组件允许开发者通过配置的方式全局覆盖组件的样式。例如：",paraId:4,tocIndex:2},{value:"Metis UI 保留了传统组件的 class 属性，允许开发者通过 CSS 文件直接覆盖样式。例如：",paraId:5,tocIndex:3},{value:"@import 'tailwindcss';\n\n@source './node_modules/metis-ui/es';\n@plugin 'metis-ui/plugin';\n\n.metis-btn.metis-btn-default {\n  @apply bg-pink-300;\n}\n",paraId:6,tocIndex:3},{value:"对于局部样式的调整，可以通过组件的 ",paraId:7,tocIndex:4},{value:"className",paraId:7,tocIndex:4},{value:" 属性进行自定义，灵活地为组件添加自定义样式，满足局部样式调整的需求，",paraId:7,tocIndex:4},{value:"详细介绍",paraId:8,tocIndex:4},{value:"。例如：",paraId:7,tocIndex:4}]},95633:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});const t=[{value:"Metis UI 只针对颜色进行主题定制，默认提供了两套主题：",paraId:0},{value:"light",paraId:0},{value:" 和 ",paraId:0},{value:"dark",paraId:0},{value:"。您还可以创建自己的自定义主题或修改内置主题。",paraId:0},{value:'您可以在 CSS 文件中的 @plugin "metis-ui/plugin" 后添加括号来管理主题。',paraId:1},{value:"@plugin 'metis-ui/plugin' {\n  themes: light --default, dark --dark; /* --default: 默认主题 --dark: 默认暗色主题，适配 prefers-color-scheme: dark */\n}\n",paraId:2},{value:"通过 ",paraId:3},{value:"ConfigProvider",paraId:3},{value:" 组件来设置当前主题，默认可选值 ",paraId:3},{value:"light",paraId:3},{value:"、",paraId:3},{value:"dark",paraId:3},{value:"、",paraId:3},{value:"system",paraId:3},{value:"。",paraId:3},{value:"import React from 'react';\nimport { ConfigProvider } from 'metis-ui';\n\nconst App: React.FC = () => <ConfigProvider theme=\"dark\">{/* ... */}</ConfigProvider>;\n\nexport default App;\n",paraId:4},{value:"禁用一个主题。",paraId:5,tocIndex:0},{value:"@plugin './src/plugin' {\n  themes: light --default;\n}\n",paraId:6,tocIndex:0},{value:"禁用所有主题。",paraId:7,tocIndex:0},{value:"@plugin './src/plugin' {\n  themes: false;\n}\n",paraId:8,tocIndex:0},{value:"可以嵌套使用 ",paraId:9,tocIndex:1},{value:"ConfigProvider",paraId:9,tocIndex:1},{value:" 来实现局部主题的更换。在子主题中未被改变的 ",paraId:9,tocIndex:1},{value:"theme",paraId:9,tocIndex:1},{value:" 将会继承父主题。",paraId:9,tocIndex:1},{value:'import React from \'react\';\nimport { Button, ConfigProvider, Space } from \'metis-ui\';\n\nconst App: React.FC = () => (\n  <ConfigProvider theme="dark">\n    <Space>\n      <Button type="primary">Theme 1</Button>\n      <ConfigProvider theme="light">\n        <Button type="primary">Theme 2</Button>\n      </ConfigProvider>\n    </Space>\n  </ConfigProvider>\n);\n\nexport default App;\n',paraId:10,tocIndex:1},{value:'要添加新主题，请在 CSS 文件中使用 @plugin "metis-ui/theme" {}，其结构如下:',paraId:11,tocIndex:2},{value:"@import 'tailwindcss';\n\n@source './node_modules/metis-ui/es';\n@plugin \"metis-ui/plugin\";\n@plugin \"metis-ui/theme\" {\n  /* 主题名称 */\n  name: 'custom-theme';\n  /* 默认主题*/\n  default: true;\n  /* 默认暗色主题，跟随系统自动切换 */\n  dark: false;\n  /* light 或 dark */\n  color-scheme: light;\n\n  /* 品牌色 */\n  primary: 'indigo-600';\n  /* 品牌悬浮色，可选属性，可由系统推导生成 */\n  primary-hover: 'indigo-500';\n  /* 品牌激活色，可选属性，可由系统推导生成 */\n  primary-active: 'indigo-700';\n  /* 品牌背景色，可选属性，可由系统推导生成 */\n  primary-bg: 'indigo-50';\n  /* 品牌背景悬浮色，可选属性，可由系统推导生成 */\n  primary-bg-hover: 'indigo-200';\n  /* 品牌边框色，可选属性，可由系统推导生成 */\n  primary-border: 'indigo-300';\n  /* 品牌次级边框色，可选属性，可由系统推导生成 */\n  primary-border-secondary: 'indigo-600/10';\n\n  /* 成功色 */\n  success: 'green-500';\n  /* 成功悬浮色，可选属性，可由系统推导生成 */\n  success-hover: 'green-400';\n  /* 成功激活色，可选属性，可由系统推导生成 */\n  success-active: 'green-600';\n  /* 成功背景色，可选属性，可由系统推导生成 */\n  success-bg: 'green-50';\n  /* 成功背景悬浮色，可选属性，可由系统推导生成 */\n  success-bg-hover: 'green-100';\n  /* 成功边框色，可选属性，可由系统推导生成 */\n  success-border: 'green-300';\n  /* 成功次级边框色，可选属性，可由系统推导生成 */\n  success-border-secondary: 'green-500/20';\n\n  /* 警戒色 */\n  warning: 'yellow-500';\n  /* 警戒悬浮色，可选属性，可由系统推导生成 */\n  warning-hover: 'yellow-400';\n  /* 警戒激活色，可选属性，可由系统推导生成 */\n  warning-active: 'yellow-600';\n  /* 警戒背景色，可选属性，可由系统推导生成 */\n  warning-bg: 'yellow-50';\n  /* 警戒背景悬浮色，可选属性，可由系统推导生成 */\n  warning-bg-hover: 'yellow-100';\n  /* 警戒边框色，可选属性，可由系统推导生成 */\n  warning-border: 'yellow-300';\n  /* 警戒次级边框色，可选属性，可由系统推导生成 */\n  warning-border-secondary: 'yellow-500/20';\n\n  /* 错误色 */\n  error: 'red-500';\n  /* 错误悬浮色，可选属性，可由系统推导生成 */\n  error-hover: 'red-400';\n  /* 错误激活色，可选属性，可由系统推导生成 */\n  error-active: 'red-600';\n  /* 错误背景色，可选属性，可由系统推导生成 */\n  error-bg: 'red-50';\n  /* 错误背景悬浮色，可选属性，可由系统推导生成 */\n  error-bg-hover: 'red-100';\n  /* 错误边框色，可选属性，可由系统推导生成 */\n  error-border: 'red-300';\n  /* 错误次级边框色，可选属性，可由系统推导生成 */\n  error-border-secondary: 'red-500/20';\n\n  /* 一级文本色 */\n  text: 'gray-900';\n  /* 二级文本色，可选属性，可由系统推导生成 */\n  text-secondary: 'gray-500';\n  /* 三级文本色，可选属性，可由系统推导生成 */\n  text-tertiary: 'gray-400';\n  /* 四级文本色，可选属性，可由系统推导生成 */\n  text-quaternary: 'gray-300';\n\n  /* 一级边框色 */\n  border: 'gray-300';\n  /* 二级边框色，可选属性，可由系统推导生成 */\n  border-secondary: 'gray-200';\n  /* 三级边框色，可选属性，可由系统推导生成 */\n  border-tertiary: 'gray-100';\n\n  /* 一级填充色 */\n  fill: 'gray-950/20';\n  /* 二级填充色，可选属性，可由系统推导生成 */\n  fill-secondary: 'gray-950/15';\n  /* 三级填充色，可选属性，可由系统推导生成 */\n  fill-tertiary: 'gray-950/10';\n  /* 四级填充色，可选属性，可由系统推导生成 */\n  fill-quaternary: 'gray-950/5';\n  /* 五级填充色，可选属性，可由系统推导生成 */\n  fill-quinary: 'gray-950/2';\n\n  /* 组件容器背景 */\n  container: 'white';\n\n  /* 引起注意的背景色 */\n  spotlight: 'gray-900/85';\n\n  /* 浮层的背景蒙层色 */\n  mask: 'gray-900/45';\n\n  /** 滚动组件滚动条颜色 */\n  scrollbar-track: 'black/5';\n  scrollbar-thumb: 'black/50';\n}\n",paraId:12,tocIndex:2},{value:"主题颜色可以是 ",paraId:13,tocIndex:2},{value:"Tailwindcss Color",paraId:13,tocIndex:2},{value:" 或者 ",paraId:13,tocIndex:2},{value:"CSS Color",paraId:13,tocIndex:2},{value:"。",paraId:13,tocIndex:2},{value:"支持由 ",paraId:14,tocIndex:2},{value:"Tailwindcss Color",paraId:14,tocIndex:2},{value:" 推导生成次级颜色，你可以像这样简化主题的定制：",paraId:14,tocIndex:2},{value:"@import 'tailwindcss';\n\n@source './node_modules/metis-ui/es';\n@plugin \"metis-ui/plugin\";\n@plugin \"metis-ui/theme\" {\n  /* 主题名称 */\n  name: 'custom-theme';\n  /* 默认主题*/\n  default: true;\n  /* 默认暗色主题，跟随系统自动切换 */\n  dark: false;\n  /* light 或 dark */\n  color-scheme: light;\n\n  /* 品牌色 */\n  primary: 'sky-600';\n  /* 成功色 */\n  success: 'green-500';\n  /* 警戒色 */\n  warning: 'yellow-500';\n  /* 错误色 */\n  error: 'red-500';\n  /* 一级文本色 */\n  text: 'gray-900';\n  /* 一级边框色 */\n  border: 'gray-300';\n  /* 一级填充色 */\n  fill: 'gray-950/20';\n  /* 组件容器背景色 */\n  container: 'white';\n  /* 浮层背景色 */\n  elevated: 'white';\n  /* 引起注意的背景色 */\n  spotlight: 'gray-900/85';\n  /* 浮层的背景蒙层色 */\n  mask: 'gray-900/45';\n  /** 滚动组件滚动条颜色 */\n  scrollbar-track: 'black/5';\n  scrollbar-thumb: 'black/50';\n}\n",paraId:15,tocIndex:2},{value:"要自定义内置主题，您可以使用与添加新主题相同的结构，但使用与内置主题相同的名称。",paraId:16,tocIndex:3},{value:"例如，要自定义 light 主题：",paraId:17,tocIndex:3},{value:"@import 'tailwindcss';\n\n@source './node_modules/metis-ui/es';\n@plugin \"metis-ui/plugin\";\n@plugin \"metis-ui/theme\" {\n  /* 主题名称 */\n  name: 'light';\n  /* 默认主题*/\n  default: true;\n  /* 默认暗色主题，跟随系统自动切换 */\n  dark: false;\n  /* light 或 dark */\n  color-scheme: light;\n\n  /* 品牌色 */\n  primary: 'pink-600';\n}\n",paraId:18,tocIndex:3},{value:"所有其他颜色将从原主题继承。",paraId:19,tocIndex:3}]},30992:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});const t=[{value:"Next.js",paraId:0},{value:" 是目前世界上最流行的 React 服务端同构框架，本文会尝试在 Next.js 创建的工程中使用 ",paraId:0},{value:"metis-ui",paraId:0},{value:" 组件。",paraId:0},{value:"在开始之前，你可能需要安装 ",paraId:1,tocIndex:0},{value:"yarn",paraId:1,tocIndex:0},{value:" 或者 ",paraId:1,tocIndex:0},{value:"pnpm",paraId:1,tocIndex:0},{value:" 或者 ",paraId:1,tocIndex:0},{value:"bun",paraId:1,tocIndex:0},{value:"。",paraId:1,tocIndex:0},{value:"工具会自动初始化一个脚手架并安装项目的各种必要依赖，在安装过程中，有一些配置项需要自行选择，其中",paraId:2},{value:"Tailwind CSS",paraId:2},{value:"选择开启，如果在过程中出现网络问题，请尝试配置代理，或使用其他 npm registry，例如，你可以切换到淘宝镜像源：",paraId:2},{value:"npm config set registry https://registry.npmmirror.com",paraId:2},{value:"。",paraId:2},{value:"初始化完成后，我们进入项目并启动。",paraId:3},{value:"$ cd metis-ui-demo\n$ npm run dev\n",paraId:4},{value:"此时使用浏览器访问 ",paraId:5},{value:"http://localhost:3000/",paraId:5},{value:" ，看到 NEXT 的 logo 就算成功了。",paraId:5},{value:"现在从 yarn 或 npm 或 pnpm 或 bun 安装并引入 metis-ui。",paraId:6,tocIndex:1},{value:"修改 ",paraId:7},{value:"src/app/globals.css",paraId:7},{value:"。",paraId:7},{value:"@import 'tailwindcss';\n\n@source '../../node_modules/metis-ui/es'; /* 此处只能使用相对路径，如果没src目录，使用 ../node_modules/metis-ui/es 替换 */\n@plugin 'metis-ui/plugin';\n",paraId:8},{value:"修改 ",paraId:9},{value:"src/app/page.tsx",paraId:9},{value:"，引入 metis-ui 的按钮组件。",paraId:9},{value:"import React from 'react';\nimport { Button } from 'metis-ui';\n\nconst Home = () => (\n  <div className=\"App\">\n    <Button type=\"primary\">Button</Button>\n  </div>\n);\n\nexport default Home;\n",paraId:10},{value:"好了，现在你应该能看到页面上已经有了 ",paraId:11},{value:"metis-ui",paraId:11},{value:" 的蓝色按钮组件，接下来就可以继续选用其他组件开发应用了。其他开发流程你可以参考 Next.js 的",paraId:11},{value:"官方文档",paraId:11},{value:"。",paraId:11},{value:"注意: Next.js App Router 当前不支持直接使用 ",paraId:12},{value:".",paraId:12},{value:" 引入的子组件，如 ",paraId:12},{value:"<Avatar.Group />",paraId:12},{value:"、",paraId:12},{value:"<DatePicker.RangePicker />",paraId:12},{value:" 等，需要从路径引入这些子组件来避免错误。",paraId:12}]},88291:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});const t=[{value:"Umi",paraId:0},{value:"，是蚂蚁集团的底层前端框架，同时支持配置式路由和约定式路由，保证路由的功能完备，并以此进行功能扩展。然后配以生命周期完善的插件体系，覆盖从源码到构建产物的每个生命周期，支持各种功能扩展和业务需求。",paraId:0},{value:"本文会引导你使用 Umi、Metis UI 从 0 开始创建一个简单应用。",paraId:1},{value:"在开始之前，你可能需要安装 ",paraId:2,tocIndex:0},{value:"yarn",paraId:2,tocIndex:0},{value:" 或者 ",paraId:2,tocIndex:0},{value:"pnpm",paraId:2,tocIndex:0},{value:" 或者 ",paraId:2,tocIndex:0},{value:"bun",paraId:2,tocIndex:0},{value:"。",paraId:2,tocIndex:0},{value:"这里选「Simple App」。",paraId:3},{value:"? Pick Umi App Template › - Use arrow-keys. Return to submit.\n❯   Simple App\n    Ant Design Pro\n    Vue Simple App\n    Umi Plugin\n",paraId:4},{value:"其他选项可根据实际需求自行选择。",paraId:5},{value:"然后工具会自动安装依赖，并执行 Umi 的初始化脚本。",paraId:6},{value:"现在从 yarn 或 npm 或 pnpm 或 bun 安装并引入 metis-ui，以及一些本教程会用到的依赖。",paraId:7,tocIndex:1},{value:"其中 ",paraId:8},{value:"@metisjs/umi-plugins",paraId:8},{value:" 是 metis 根据 Umi 框架研发的插件集，可让用户通过配置的方式一键开启和使用 ",paraId:8},{value:"metis-ui",paraId:8},{value:"、",paraId:8},{value:"locale",paraId:8},{value:"(与",paraId:8},{value:"@umijs/plugins/locale",paraId:8},{value:"功能类似)",paraId:8},{value:"完成后，执行以下命令启动项目。",paraId:9},{value:"$ pnpm run dev\numi dev\ninfo  - Umi v4.0.46\n        ╔════════════════════════════════════════════════════╗\n        ║ App listening at:                                  ║\n        ║  >   Local: http://localhost:8000                  ║\nready - ║  > Network: http://*********:8000                  ║\n        ║                                                    ║\n        ║ Now you can open browser with the above addresses↑ ║\n        ╚════════════════════════════════════════════════════╝\n",paraId:10},{value:"跟着提示点击命令行里的 url，会自动打开浏览器。如果顺利，你会看到 ",paraId:11},{value:"Yay! Welcome to Umi!",paraId:11},{value:"修改 ",paraId:12},{value:".umirc.ts",paraId:12},{value:"。",paraId:12},{value:"import { defineConfig } from 'umi';\n\nexport default defineConfig({\n  routes: [\n    { path: '/', component: 'index' },\n    { path: '/docs', component: 'docs' },\n  ],\n  npmClient: 'pnpm',\n  metisui: { theme: 'system' },\n  plugins: ['@metisjs/umi-plugins/dist/metisui'],\n});\n",paraId:13},{value:"metisui",paraId:14},{value:" 支持 ",paraId:14},{value:"ConfigProvider",paraId:15},{value:" 的所有配置。",paraId:14},{value:"根目录下新建 ",paraId:16},{value:"tailwind.css",paraId:16},{value:"@import 'tailwindcss';\n\n@source './node_modules/metis-ui/es';\n@plugin 'metis-ui/plugin';\n",paraId:17},{value:"修改 ",paraId:18},{value:"src/pages/index.tsx",paraId:18},{value:'import { Alert } from \'metis-ui\';\n\nexport default function HomePage() {\n  return (\n    <div className="h-screen w-screen">\n      <Alert type="info" banner message="Hello" description="Welcome to metis-ui" />\n    </div>\n  );\n}\n',paraId:19},{value:"好了，现在你应该能看到页面上已经有了 metis-ui 的 Alert 组件，接下来就可以继续开发应用了。",paraId:20},{value:"在 ",paraId:21,tocIndex:2},{value:".umirc.ts",paraId:21,tocIndex:2},{value:" 中，通过 ",paraId:21,tocIndex:2},{value:"metisui",paraId:21,tocIndex:2},{value:" 配置全局 ",paraId:21,tocIndex:2},{value:"ConfigProvider",paraId:22,tocIndex:2},{value:"。",paraId:21,tocIndex:2},{value:"import { defineConfig } from 'umi';\n\nexport default defineConfig({\n  // ...\n  metisui: { theme: 'system', componentSize: 'small' },\n  plugins: ['@metisjs/umi-plugins/dist/metisui'],\n});\n",paraId:23,tocIndex:2},{value:"在 ",paraId:24,tocIndex:3},{value:"src/app.ts(x)",paraId:24,tocIndex:3},{value:" 运行时配置中可以修改 ConfigProvider 的值，比如可以从 localStorage读取主题。",paraId:24,tocIndex:3},{value:"import { RuntimeMetisUIConfig } from 'umi';\n\nexport const metisui: RuntimeMetisUIConfig = (memo) => {\n  const theme = localStorage.getItem('theme');\n  if (theme) {\n    memo.theme = theme;\n  }\n\n  return memo;\n};\n",paraId:25,tocIndex:3},{value:"通过 ",paraId:26,tocIndex:4},{value:"useMetisUIConfig",paraId:26,tocIndex:4},{value:" 方法来动态获取、修改 ConfigProvider 配置，通常可用于动态修改主题。",paraId:26,tocIndex:4},{value:"新建 ",paraId:27,tocIndex:4},{value:"src/components/ThemeSwitch.tsx",paraId:27,tocIndex:4},{value:" 组件。",paraId:27,tocIndex:4},{value:"import type { FC } from 'react';\nimport { ComputerDesktopOutline, MoonSparklesOutline, SunOutline } from '@metisjs/icons';\nimport { Dropdown } from 'metis-ui';\nimport { MenuClickEventHandler } from 'metis-ui/es/menu/interface';\nimport { useMetisUIConfig } from 'umi';\n\nexport type ThemeName = 'system' | 'light' | 'dark';\n\nconst themes = [\n  {\n    name: 'light',\n    icon: <SunOutline />,\n    label: '亮色模式',\n  },\n  {\n    name: 'dark',\n    icon: <MoonSparklesOutline />,\n    label: '暗色模式',\n  },\n  {\n    name: 'system',\n    icon: <ComputerDesktopOutline />,\n    label: '跟随系统',\n  },\n];\n\nconst ThemeSwitch: FC = () => {\n  const [config, setConfig] = useMetisUIConfig();\n\n  const onThemeChange: MenuClickEventHandler = ({ key }) => {\n    setConfig({ theme: key as ThemeName });\n    localStorage.setItem('theme', key as ThemeName);\n  };\n\n  const currentTheme = themes.find((theme) => theme.name === (config.theme ?? 'system'));\n\n  return (\n    <Dropdown\n      trigger={['click']}\n      menu={{\n        items: themes.map((theme) => ({\n          key: theme.name,\n          label: theme.label,\n          icon: theme.icon,\n        })),\n        selectable: true,\n        selectedKeys: [currentTheme!.name],\n        onClick: onThemeChange,\n        className: { item: { icon: '-ms-1 size-5' } },\n      }}\n    >\n      <button className=\"text-text m-6 flex items-center *:size-10\">{currentTheme?.icon}</button>\n    </Dropdown>\n  );\n};\n\nexport default ThemeSwitch;\n",paraId:28,tocIndex:4},{value:"再次修改 ",paraId:29,tocIndex:4},{value:"src/pages/index.tsx",paraId:29,tocIndex:4},{value:"，引入 ",paraId:29,tocIndex:4},{value:"ThemeSwitch",paraId:29,tocIndex:4},{value:'import { Alert } from \'metis-ui\';\nimport ThemeSwitch from \'@/components/ThemeSwitch\';\n\nexport default function HomePage() {\n  return (\n    <div className="h-screen w-screen">\n      <Alert type="info" banner message="Hello" description="Welcome to metis-ui" />\n      <ThemeSwitch />\n    </div>\n  );\n}\n',paraId:30,tocIndex:4},{value:"现在你应该能看到页面上已经有了样式切换的图标了，试试切换不同的样式吧。",paraId:31,tocIndex:4},{value:"如果你需要在应用中开启国际化功能，使用 ",paraId:32,tocIndex:5},{value:"@metisjs/umi-plugins/dist/locale",paraId:32,tocIndex:5},{value:" 替换 ",paraId:32,tocIndex:5},{value:"@umijs/plugins/dist/locale",paraId:32,tocIndex:5},{value:" 插件，使用方法可",paraId:32,tocIndex:5},{value:"参考",paraId:32,tocIndex:5},{value:"。",paraId:32,tocIndex:5},{value:"import { defineConfig } from 'umi';\n\nexport default defineConfig({\n  // ...\n  locale: { metisui: true, default: 'zh-CN' },\n  plugins: [\n    '@metisjs/umi-plugins/dist/metisui',\n    '@metisjs/umi-plugins/dist/locale'\n  ],\n});\n",paraId:33,tocIndex:5},{value:"好了，现在你可以继续选用其他组件开发应用了。其他开发流程你可以参考 Umi 的",paraId:34,tocIndex:5},{value:"官方文档",paraId:34,tocIndex:5},{value:"。",paraId:34,tocIndex:5}]},43561:function(e,a,n){n.r(a),n.d(a,{texts:function(){return t}});const t=[{value:"Vite",paraId:0},{value:" 是业界最优秀的 React 应用开发工具之一，本文会尝试在 Vite 创建的工程中使用 ",paraId:0},{value:"metis-ui",paraId:0},{value:" 组件，并自定义 Vite 的配置以满足各类工程化需求。",paraId:0},{value:"在开始之前，你可能需要安装 ",paraId:1,tocIndex:0},{value:"yarn",paraId:1,tocIndex:0},{value:" 或者 ",paraId:1,tocIndex:0},{value:"pnpm",paraId:1,tocIndex:0},{value:" 或者 ",paraId:1,tocIndex:0},{value:"bun",paraId:1,tocIndex:0},{value:"。",paraId:1,tocIndex:0},{value:"工具会自动初始化一个脚手架并安装 React 项目的各种必要依赖，如果在过程中出现网络问题，请尝试配置代理，或使用其他 npm registry。",paraId:2},{value:"然后我们进入项目安装依赖并启动。",paraId:3},{value:"$ cd metis-ui-demo\n$ npm install\n$ npm run dev\n",paraId:4},{value:"此时使用浏览器访问 ",paraId:5},{value:"http://localhost:5173/",paraId:5},{value:" ，看到 ",paraId:5},{value:"Vite + React",paraId:5},{value:" 的界面就算成功了。",paraId:5},{value:"安装 ",paraId:6,tocIndex:1},{value:"metis-ui",paraId:6,tocIndex:1},{value:"、",paraId:6,tocIndex:1},{value:"tailwindcss",paraId:6,tocIndex:1},{value:" 和 ",paraId:6,tocIndex:1},{value:"@tailwindcss/vite",paraId:6,tocIndex:1},{value:"。",paraId:6,tocIndex:1},{value:"vite 配置中添加 ",paraId:7},{value:"@tailwindcss/vite",paraId:7},{value:" 插件。",paraId:7},{value:"import { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport tailwindcss from '@tailwindcss/vite';\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [\n    react(), \n    tailwindcss(),\n  ],\n});\n",paraId:8},{value:"根目录下新建 ",paraId:9},{value:"tailwind.css",paraId:9},{value:"。",paraId:9},{value:"@import 'tailwindcss';\n\n@source './node_modules/metis-ui/es';\n@plugin 'metis-ui/plugin';\n",paraId:10},{value:"修改",paraId:11},{value:"index.html",paraId:11},{value:"，引入tailwindcss。",paraId:11},{value:'<!doctype html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <link rel="icon" type="image/svg+xml" href="/vite.svg" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <link href="/tailwind.css" rel="stylesheet" />\n    <title>Vite + React + TS</title>\n  </head>\n  <body>\n    <div id="root"></div>\n    <script type="module" src="/src/main.tsx"><\/script>\n  </body>\n</html>\n',paraId:12},{value:"修改 ",paraId:13},{value:"src/App.ts",paraId:13},{value:"，引入 metis-ui 的按钮组件。",paraId:13},{value:'import { Alert } from \'metis-ui\';\n\nconst App = () => (\n  <div className="h-screen w-screen">\n    <Alert type="info" banner message="Hello" description="Welcome to metis-ui" />\n  </div>\n);\n\nexport default App;\n',paraId:14},{value:"好了，现在你应该能看到页面上已经有了 ",paraId:15},{value:"metis-ui",paraId:15},{value:" 的 ",paraId:15},{value:"Alert",paraId:15},{value:" 组件，接下来就可以继续选用其他组件开发应用了。其他开发流程你可以参考 Vite 的",paraId:15},{value:"官方文档",paraId:15},{value:"。",paraId:15},{value:"我们现在已经把 metis-ui 组件成功运行起来了，开始开发你的应用吧！",paraId:16}]}}]);