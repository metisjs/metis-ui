"use strict";(self.webpackChunkmetis_ui=self.webpackChunkmetis_ui||[]).push([[9406],{98091:function(a,_,n){n.r(_);var s=n(37496),u=n(82857),c=n(91238),m=n(83120),p=n(48415),h=n(95300),v=n(11024),x=n(65110),f=n(10006),g=n(18637),I=n(741),j=n(30166),i=n(91512),o=n(35055),r=n(30158),l=n(39546),t=n(12833),e=n(74132);function d(){return(0,e.jsx)(o.DumiPage,{children:(0,e.jsx)(l.Suspense,{fallback:(0,e.jsx)(r.Z,{}),children:(0,e.jsx)(e.Fragment,{children:(0,e.jsxs)("div",{className:"markdown",children:[(0,e.jsxs)("p",{children:[t.texts[0].value,(0,e.jsx)("a",{href:"https://vitejs.dev/",children:t.texts[1].value}),t.texts[2].value]}),(0,e.jsx)("p",{children:t.texts[3].value}),(0,e.jsxs)("ul",{children:[(0,e.jsxs)("li",{children:[(0,e.jsx)("strong",{children:t.texts[4].value}),t.texts[5].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("strong",{children:t.texts[6].value}),t.texts[7].value,(0,e.jsxs)("ul",{children:[(0,e.jsxs)("li",{children:[(0,e.jsx)("strong",{children:t.texts[8].value}),t.texts[9].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("strong",{children:t.texts[10].value}),t.texts[11].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("strong",{children:t.texts[12].value}),t.texts[13].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("strong",{children:t.texts[14].value}),t.texts[15].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("strong",{children:t.texts[16].value}),t.texts[17].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("strong",{children:t.texts[18].value}),t.texts[19].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("strong",{children:t.texts[20].value}),t.texts[21].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("strong",{children:t.texts[22].value}),t.texts[23].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("strong",{children:t.texts[24].value}),t.texts[25].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("strong",{children:t.texts[26].value}),t.texts[27].value]}),(0,e.jsxs)("li",{children:[(0,e.jsx)("strong",{children:t.texts[28].value}),t.texts[29].value]}),(0,e.jsx)("li",{children:t.texts[30].value})]})]})]}),(0,e.jsx)("p",{children:t.texts[31].value}),(0,e.jsxs)("h2",{id:"directory-structure",children:[(0,e.jsx)("a",{"aria-hidden":"true",tabIndex:"-1",href:"#directory-structure",children:(0,e.jsx)("span",{className:"icon icon-link"})}),"Directory Structure"]}),(0,e.jsx)(i.Z,{children:t.texts[32].value}),(0,e.jsx)("blockquote",{children:(0,e.jsx)("p",{children:t.texts[33].value})})]})})})})}_.default=d},12833:function(a,_,n){n.r(_),n.d(_,{texts:function(){return s}});const s=[{value:"This project is based on ",paraId:0},{value:"Vite",paraId:0},{value:' as the frontend build tool, adopting a modern development workflow and efficient module hot-reloading mechanism. The directory structure is clearly divided by functionality, following the "convention over configuration" principle to facilitate team collaboration and project maintenance.',paraId:0},{value:"The responsibilities of each directory and file are as follows:",paraId:1},{value:"public",paraId:2},{value:": Stores static resources that can be accessed directly without building, such as favicon and global images.",paraId:2},{value:"src",paraId:2},{value:`: The core source code directory, subdivided by functional modules to improve readability and maintainability.
`,paraId:2},{value:"apis",paraId:3},{value:": Centralized management of all backend API requests for easy reuse and maintenance.",paraId:3},{value:"assets",paraId:3},{value:": Centralized storage of images, SVGs, and other static resources for unified management and referencing.",paraId:3},{value:"components",paraId:3},{value:": Encapsulated common UI components for high reusability and low coupling.",paraId:3},{value:"hooks",paraId:3},{value:": Custom React Hooks to extract common logic and improve code reuse.",paraId:3},{value:"layouts",paraId:3},{value:": Components related to page layouts, supporting multiple page structure switches.",paraId:3},{value:"locale",paraId:3},{value:": Internationalization resource files for multi-language support.",paraId:3},{value:"mocks",paraId:3},{value:": Local mock data and services for development and testing.",paraId:3},{value:"pages",paraId:3},{value:": Page-level components organized by routes for clear structure.",paraId:3},{value:"store",paraId:3},{value:": Global state management based on Zustand, simple and efficient.",paraId:3},{value:"types",paraId:3},{value:": TypeScript type definitions to enhance type safety and development experience.",paraId:3},{value:"utils",paraId:3},{value:": Common utility functions and classes for global use.",paraId:3},{value:"Other entry and configuration files to ensure a clear and well-defined project structure.",paraId:3},{value:"With this directory convention, you can quickly locate and manage various resources and code in the project, reducing maintenance costs and improving development efficiency. It is suitable for medium to large team collaboration and facilitates future feature expansion and technology upgrades.",paraId:4},{value:`\u251C\u2500\u2500 .husky                     # Husky hook configuration directory
\u251C\u2500\u2500 public                     # Public static resources
\u251C\u2500\u2500 src                        # Source code directory
\u2502   \u251C\u2500\u2500 apis                   # Backend API requests
\u2502   \u251C\u2500\u2500 assets                 # Static resources (images, SVGs, etc.)
\u2502   \u251C\u2500\u2500 components             # Common components
\u2502   \u251C\u2500\u2500 hooks                  # Custom hooks
\u2502   \u251C\u2500\u2500 layouts                # Page layout components
\u2502   \u251C\u2500\u2500 locale                 # Internationalization resources
\u2502   \u251C\u2500\u2500 mocks                  # Mock data and services
\u2502   \u251C\u2500\u2500 pages                  # Page components
\u2502   \u251C\u2500\u2500 store                  # Zustand state management
\u2502   \u251C\u2500\u2500 types                  # TypeScript type definitions
\u2502   \u251C\u2500\u2500 utils                  # Utility functions and classes
\u2502   \u251C\u2500\u2500 loading.tsx            # Global Loading component
\u2502   \u251C\u2500\u2500 main.tsx               # Application entry file
\u2502   \u251C\u2500\u2500 routes.tsx             # Route and menu configuration
\u2502   \u2514\u2500\u2500 vite-env.d.ts          # Vite environment type declarations
\u251C\u2500\u2500 .env                       # Environment variable configuration
\u251C\u2500\u2500 .lintstagedrc              # lint-staged configuration
\u251C\u2500\u2500 .prettierignore            # Prettier ignore file
\u251C\u2500\u2500 .prettierrc                # Prettier code formatting configuration
\u251C\u2500\u2500 commitlint.config.js       # Commit message linting configuration
\u251C\u2500\u2500 eslint.config.js           # ESLint configuration
\u251C\u2500\u2500 index.html                 # Project entry HTML
\u251C\u2500\u2500 package.json               # Project dependencies and scripts
\u251C\u2500\u2500 tailwind.css               # TailwindCSS global styles entry
\u251C\u2500\u2500 tsconfig.app.json          # TS app configuration
\u251C\u2500\u2500 tsconfig.json              # TS root configuration
\u251C\u2500\u2500 tsconfig.node.json         # TS Node configuration
`,paraId:5,tocIndex:0},{value:"Translate by ChartGPT",paraId:6,tocIndex:0}]}}]);
